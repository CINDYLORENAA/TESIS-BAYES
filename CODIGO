---
title: "ANALISIS"
author: "Lorena Albarracin Avila"
date: "9/9/2022"
output: html_document
---


#Librerias usadas


```{r}
library(readxl)
library(table1)
library(mosaic)
library(DescTools)
library(ggplot2)
library (tidyverse)
library(readr)
library(dplyr)
library(lubridate)# fechas
library(reshape)
library(geoR)
library(knitr)
library(incidence)
library(binom)
library(incidence)

library(tmap)
library(sf)
library(ggmap)
library(rgdal)
library(rgeos)
library(maptools)




```


#Lectura bases de datos
```{r}

basecovid <- read_csv("data/basecovid.csv")
MUN_COL <- read_excel("data/MUN_COL.xlsx")
BASE_COV19_IPM <- read_csv("data/BASE_COV19_IPM.csv")
BASE_COV19_IPM <- BASE_COV19_IPM %>% select(CodeM, DEN_POB, IPM_MUN, PRE_HTA,PRE_DM, PRE_ERC, PRE_CA) %>% group_by(CodeM) %>% distinct()

BASE_COV19_IPM = rename(BASE_COV19_IPM, c(COD_MUN ="CodeM"))

```

# Limpieza base de datos CASOS  COVID

#Fechas 

```{r}
basecovid$`fecha reporte web`<- as.Date(basecovid$`fecha reporte web`,format="%Y/%m/%d")
basecovid$`Fecha de notificación`<- as.Date(basecovid$`Fecha de notificación`,format="%m/%Y")
basecovid$`Fecha de diagnóstico`<- as.Date(basecovid$`Fecha de diagnóstico`,format="%m/%Y")
basecovid$`Fecha de inicio de síntomas`<- as.Date(basecovid$`Fecha de inicio de síntomas`,format="%m/%Y")
basecovid$`Fecha de muerte`<- as.Date(basecovid$`Fecha de muerte`,format="%m/%Y")
basecovid$`Fecha de recuperación`<- as.Date(basecovid$`Fecha de recuperación`,format="%m/%Y")
basecovid$año <- as.numeric(format(basecovid$`Fecha de diagnóstico`,"%Y"))
basecovid$mes <- as.numeric(format(basecovid$`Fecha de diagnóstico`,"%m"))


```


```{r}
#table(basecovid$año)

```


seleccionar solo año 2020 y 2021, y municipios elegidos 

```{r}
basecovid<-basecovid   %>% 
     filter(año %in% c("2020","2021"))  



basecovid$ind <- ifelse(is.element(basecovid$`Código DIVIPOLA municipio`, c(27086,94663,88001,88564,91263,91405,91407,91430,91460,91530,91536,91669,91798,94343,94883,94884,94885,94886,94887,94888,97511,97777,97889)),0,1)

basecovidfinal<-basecovid   %>% 
     filter(ind %in% c(1)) 

rm(basecovid)

basecovidfinal$Sexo[basecovidfinal$Sexo =="f"] <- "F"
basecovidfinal$Sexo[basecovidfinal$Sexo =="m"] <- "M"


```

Codigos de municipios a excluir

```{r}

### Por ser areas no municipalizadas, San Andres, Providencia y Barrancominas. 
#excluidos<- c(27086,94663,88001,88564,91263,91405,91407,91430,91460,91530,91536,91669,91798,94343,94883,94884,94885,94886,94887,94888,97511,97777,97889)


### Munipios que no cuentan con informacion de prevalencias e IPM 

#excluidos_2<-c (88001,88564,91263,91405,91407,91430,91460,91530,91536,91669,91798,94343,94883,94884,94885,94886,94887,94888,97511,97777,97889,8638,15106,15131,15368,15401,18860,19050,19100,19290,19473,19517,19701,23079,23678,25258,25312,25402,25483,25658,27615,41319,41530,41676,44035,44874,47205,47675,50313,50318,50590,50689,52083,52215,52260,52399,52473,52480,52612,52685,52693,54673,54820,63001,63111,63212,66075,66687,68020,68077,68092,68101,68121,68176,68207,68250,68320,68615,68669,68705,68773,68872,70110,70400,70717,70771,73678,73770,73873,76054,76100,76130,76400,76403,76606,76670,85300,85440,86755,86760,95015,95200)
```



#BASE DE DATOS DE MUNICIPIOS 

#numero de casos por municipio

```{r}
casos_mun<-as.data.frame(table(basecovidfinal$`Código DIVIPOLA municipio`))
library(dplyr)
casos_mun = rename(casos_mun, c(Total_casos= "Freq"))
```

Tablas de municipios 


```{r}

MUN_COL<-merge(MUN_COL,casos_mun, by.x="COD_MUN", by.y="Var1")  
rm(casos_mun)

#variables de prevalencia ENF   ( disponible para 1019 municipios)

MUN_COL_PREV<-left_join(MUN_COL,BASE_COV19_IPM, by="COD_MUN") 

rm(MUN_COL)
rm (BASE_COV19_IPM)
```


Distribucion de casos por Promedio de edad por municipio 

```{r}

basecovidfinal$Edad_años <- round(if_else(condition = basecovidfinal$`Unidad de medida de edad` == 2,
                            true = basecovidfinal$Edad/12,
                            false = if_else(condition = basecovidfinal$`Unidad de medida de edad` == 3,
                                            true = basecovidfinal$Edad/365,
                                            false = basecovidfinal$Edad)),4)

Edad<- basecovidfinal %>% select(`Código DIVIPOLA municipio`,Edad_años ) %>% group_by(`Código DIVIPOLA municipio`)%>% summarise(Promedio_Edad_años = mean(Edad_años))

MUN_COL_PREV<-merge (MUN_COL_PREV,Edad, by.x="COD_MUN", by.y="Código DIVIPOLA municipio") 

rm(Edad)

```



Distribucion de casos por sexo por municpio 
```{r}
Sexo <- basecovidfinal %>% select(`Código DIVIPOLA municipio`,Sexo ) %>% group_by(`Código DIVIPOLA municipio`)

Sexo$Femenino <- (if_else(condition = Sexo$Sexo== "F", true = 1, false = 0))


Sexo_mun<- Sexo %>% select(`Código DIVIPOLA municipio`, Femenino ) %>% group_by(`Código DIVIPOLA municipio`)%>% summarise(Proporcion_Mujeres  = mean(Femenino))

MUN_COL_PREV<-merge (MUN_COL_PREV,Sexo_mun, by.x="COD_MUN", by.y="Código DIVIPOLA municipio") 

rm(Sexo)
rm(Sexo_mun)

```


Tasas: incidencia, mortalidad, letalidad  por Municipio 

```{r}
cond_final <- basecovidfinal %>% select(`Código DIVIPOLA municipio`, Recuperado) %>% group_by(`Código DIVIPOLA municipio`)


cond_final[cond_final=="fallecido"] <- "Fallecido"


cond_final$muerto <- (if_else(condition = cond_final$Recuperado == "Fallecido", true = 1, false = 0))

cond_final$recuperado <- (if_else(condition = cond_final$Recuperado == "Recuperado", true = 1, false = 0))

cond_final_mun<- cond_final %>% group_by(`Código DIVIPOLA municipio`)%>% summarise(Num_muertos  = sum(muerto))


cond_final_den<- cond_final %>% group_by(`Código DIVIPOLA municipio`)%>% summarise(Num_recup  = sum(recuperado))

cond_final_den$total<-cond_final_mun$Num_muertos+cond_final_den$Num_recup
  
MUN_COL_PREV<-merge (MUN_COL_PREV,cond_final_mun, by.x="COD_MUN", by.y="Código DIVIPOLA municipio") 

rm(cond_final)
rm(cond_final_mun)

##Tasa incidencia (NUM CASOS/ total poblacion  )

MUN_COL_PREV$Tasa_incidencia_x10.000<-MUN_COL_PREV$Total_casos/MUN_COL_PREV$POB_Total*10000

##Tasa mortalidad (muertos/ total poblacion  )

MUN_COL_PREV$Tasa_mortalidad_x10.000<-MUN_COL_PREV$Num_muertos/MUN_COL_PREV$POB_Total_2020*10000

##Tasa Letalidad (muertos/ recuperados -muertos )

MUN_COL_PREV$Tasa_letalidad_x10.000<-MUN_COL_PREV$Num_muertos/cond_final_den$total*10000

```


#  primeros municipios con mayor tasa  de incidencia

```{r}
MUN_COL_PREV<-MUN_COL_PREV %>% arrange(desc(Tasa_incidencia_x10.000))

```

## Analisis de casos de COVID 19

casos por mes y municipio para el año 2020-2021

```{r}
datosmun<-basecovidfinal %>% group_by(`Código DIVIPOLA municipio`, año) %>% count(mes)

datosmun = rename(datosmun, c(COD_MUN="Código DIVIPOLA municipio"))

casos_mes2<- dcast(datosmun, COD_MUN ~ año + mes, value.var = "n")
rm(datosmun)

```

Analisis General

tasa de letalidad general 

```{r}
n_dead <- sum(MUN_COL_PREV$Num_muertos)
n_known_outcome <- sum(cond_final_den$total)
cfr <- n_dead / n_known_outcome *100

cfr_with_CI <- binom.confint(n_dead, n_known_outcome, method = "exact")


rm (cfr_with_CI)
rm(cond_final_den)
```

Bases para mapas

```{r}

municipios=st_read ("fuentes/mpio/mpio.shp")

municipios$COD_MUN<-as.numeric(municipios$MPIOS)

municipios<-left_join(municipios, MUN_COL_PREV, by="COD_MUN")

rm(MUN_COL_PREV)


```

# MAPAS

Mapa altitud media 


```{r}
ggplot(data = municipios) +
  geom_sf()

ggplot(data = municipios) +
  geom_sf(aes(fill = `Altitud media m,s,n,m`)) + 
  scale_fill_gradient(low = "dark green", high = "blue", na.value = "dark gray")
```


Mapa temperatura 


```{r}

ggplot(data = municipios) +
  geom_sf(aes(fill = `Clima °C`)) + 
  scale_fill_gradient(low = "yellow", high = "red", na.value = "gray")
```


Mapa aeropuerto 


```{r}
ggplot(data = municipios) +
  geom_sf(aes(fill = `Valor Agregado Municipal (VA)`), color= "black")+ 
  scale_fill_gradient(low = "blue", high = "red", na.value = "gray")
```

mapa penetracion internet


```{r}
ggplot(data = municipios) +
  geom_sf(aes(fill = Penetracion_Internet ))

```

Mapa Indice_Desempeño_Fiscal

```{r}

ggplot(data = municipios) +
  geom_sf(aes(fill = Penetracion_Internet ))

```

DIMENSION URBANA 

```{r}


ggplot(data = municipios) +
  geom_sf(aes(fill = `DIMENSION URBANA` )) + 
  scale_fill_gradient(low = "blue", high = "green", na.value = "gray")

```


DIMENSIÓN ECONOMICA

```{r}


ggplot(data = municipios) +
  geom_sf(aes(fill = `DIMENSIÓN ECONOMICA` )) + 
  scale_fill_gradient(low = "blue", high = "green", na.value = "gray")

```

DIMENSIÓN CALIDAD DE VIDA

```{r}


ggplot(data = municipios) +
  geom_sf(aes(fill = `DIMENSIÓN CALIDAD DE VIDA` )) + 
  scale_fill_gradient(low = "blue", high = "green", na.value = "gray")

```

DIMENSIÓN INSTITUCIONAL

```{r}


ggplot(data = municipios) +
  geom_sf(aes(fill = `DIMENSIÓN INSTITUCIONAL` )) + 
  scale_fill_gradient(low = "blue", high = "green", na.value = "gray")

```


Numero de casos COVID-19

```{r}

ggplot(data = municipios) +
  geom_sf(aes(fill = Total_casos)) + 
  scale_fill_gradient(low = "yellow", high = "red", na.value = "gray") 

```


DENSIDAD POBLACIONAL 

```{r}

ggplot(data = municipios) +
  geom_sf(aes(fill = DEN_POB)) + 
  scale_fill_gradient(low = "yellow", high = "red", na.value = "gray") 

```


IPM_2020

```{r}

ggplot(data = municipios) +
  geom_sf(aes(fill = IPM_MUN)) + 
  scale_fill_gradient(low = "yellow", high = "red", na.value = "gray") 

```



IPM_2020

```{r}

ggplot(data = municipios) +
  geom_sf(aes(fill = IPM_MUN)) + 
  scale_fill_gradient(low = "green", high = "red", na.value = "gray") 

```

IPM_2020

```{r}

ggplot(data = municipios) +
  geom_sf(aes(fill = IPM_MUN)) + 
  scale_fill_gradient(low = "yellow", high = "red", na.value = "gray") 

```


PREVALENCIA HTA 

```{r}

ggplot(data = municipios) +
  geom_sf(aes(fill = PRE_HTA)) + 
  scale_fill_gradient(low = "Beige", high = "red", na.value = "gray") 

```

PREVALENCIA DM

```{r}

ggplot(data = municipios) +
  geom_sf(aes(fill = PRE_DM)) + 
  scale_fill_gradient(low = "Orange", high = "Red", na.value = "gray") 

```

PREVALENCIA ERC

```{r}

ggplot(data = municipios) +
  geom_sf(aes(fill = PRE_ERC)) + 
  scale_fill_gradient(low = "Beige", high = "Red", na.value = "gray") 

```

PREVALENCIA CA

```{r}

ggplot(data = municipios) +
  geom_sf(aes(fill = PRE_CA)) + 
  scale_fill_gradient(low = "Yellow", high = "Red", na.value = "gray") 

```


Promedio de edad casos covid

```{r}

ggplot(data = municipios) +
  geom_sf(aes(fill = Promedio_Edad_años)) + 
  scale_fill_gradient(low = "Blue", high = "green", na.value = "gray") 

```

Proporcion de mujeres

```{r}

ggplot(data = municipios) +
  geom_sf(aes(fill = Proporcion_Mujeres)) + 
  scale_fill_gradient(low = "red", high = "orange", na.value = "gray") 

```

Número muertos 

```{r}

ggplot(data = municipios) +
  geom_sf(aes(fill = Num_muertos)) + 
  scale_fill_gradient(low = "blue", high = "green", na.value = "gray") 

```
Tasa de incidencia

```{r}
ggplot(data = municipios) +
  geom_sf(aes(fill = Tasa_incidencia_x10.000)) + 
  scale_fill_gradient(low = "blue", high = "green", na.value = "gray") 

```

Tasa de mortalidad

```{r}
ggplot(data = municipios) +
  geom_sf(aes(fill = Tasa_mortalidad_x10.000)) + 
  scale_fill_gradient(low = "blue", high = "green", na.value = "gray") 

```
Tasa de letalidad

```{r}
ggplot(data = municipios) +
  geom_sf(aes(fill = Tasa_mortalidad_x10.000)) + 
  scale_fill_gradient(low = "blue", high = "green", na.value = "gray90") 

```



EXCLUIDOS

```{r}
Municipios_Excluidos_copia <- read_excel("fuentes/Municipios Excluidos - copia.xlsx")
municipios<-left_join(municipios,Municipios_Excluidos_copia, by="COD_MUN")

rm(Municipios_Excluidos_copia)
```


Mapa de Municipios excluidos

```{r}

ggplot(data = municipios) +
  geom_sf(aes(fill = EXCLUIDO))  

```

```{r}
IMPUTAR <- read_excel("fuentes/IMPUTAR.xlsx")
municipios<-left_join(municipios,IMPUTAR, by="COD_MUN")
rm(IMPUTAR)
```

Mapa de Municipios a Imputar

```{r}

ggplot(data = municipios) +
  geom_sf(aes(fill = FALTANTE))  

```

BASE COMPLETA DE MUNICIPIOS- (informacion mapas, informacion de variables, informacion casos por mes)

```{r}
municipios<-left_join(municipios,casos_mes2, by="COD_MUN")
rm(casos_mes2)

municipios <- municipios %>%
  filter(DPTO != "88")



```

```{r}
ggplot(data = municipios) +
  geom_sf(aes(fill = `2020_3`)) + 
  scale_fill_gradient(low = "blue", high = "green", na.value = "gray90") 
```
ENSAYO

```{r}
library(maptools) 
gpclibPermit()

## (clases) para la representación de datos espaciales en el R
require(sp)  
## funciones de análisis de datos de área
require(spdep)

## funciones para facilitar la división de datos en clases por varios criterios

require(classInt) 
require(sf) 

## funciones utilizadas para crear paletas de colores en visualización de mapas

require(RColorBrewer)
par.ori <- par(no.readonly=TRUE)


```

```{r}
coords <- coordinates(as((municipios), 'Spatial'))
rook_Col <- poly2nb(as(municipios, 'Spatial'), queen = FALSE)
```

```{r}
nb_to_df <- function(nb, coords){
  x <- coords[, 1]
  y <- coords[, 2]
  n <- length(nb)

  cardnb <- card(nb)
  i <- rep(1:n, cardnb)
  j <- unlist(nb)
  return(data.frame(x = x[i], xend = x[j],
                    y = y[i], yend = y[j]))
}
```

```{r}
rook_rook_Col_df <- nb_to_df(rook_Col, coords)
```

```{r}
ggplot(municipios) +
  geom_sf()+
  geom_point(data = rook_rook_Col_df,
             mapping = aes(x = x, y = y))+
  geom_segment(data = rook_rook_Col_df,
               mapping = aes(x = x, xend = xend, y = y, yend = yend))+
  labs(x = "",y = "")
```

Criterio Queen (de la Reina)

```{r}
queen_Col <- poly2nb(as(municipios, 'Spatial'), queen = T)

queen_Col_df <- nb_to_df(queen_Col, coords)
```

```{r}
ggplot(municipios) +
  geom_sf()+
  geom_point(data = queen_Col_df,
             mapping = aes(x = x, y = y))+
  geom_segment(data = queen_Col_df,
               mapping = aes(x = x, xend = xend, y = y, yend = yend))+
  labs(x = "", y = "")
```

```{r}
kn_COL <- knn2nb(knearneigh(coords, k = 6))
kn_COL_df <- nb_to_df(kn_COL,coords)

ggplot(municipios) +
  geom_sf()+
  geom_point(data = kn_COL_df, mapping = aes(x = x, y = y))+
  geom_segment(data = kn_COL_df,
               mapping = aes(x = x, xend = xend, y = y, yend = yend))+
  labs(x = "", y = "")


```


```{r}
queen_col_lw <- nb2listw(queen_Col, zero.policy = TRUE)

moran.test(municipios$Total_casos, listw = queen_col_lw, zero.policy = TRUE)

moran.test(c(1:1119), listw = queen_col_lw, zero.policy = TRUE)

```
