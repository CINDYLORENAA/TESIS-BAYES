------
title: "ANALISIS"
author: "Lorena Albarracin Avila"
date: "9/9/2022"
output: html_document
---


#Librerias usadas


```{r}
library(readxl)
library(table1)
library(mosaic)
library(DescTools)
library(ggplot2)
library (tidyverse)
library(readr)
library(dplyr)
library(lubridate)# fechas
library(reshape)
library(geoR)
library(knitr)
library(incidence)
library(binom)

library(s2)
library(tmap)
library(sf)
library(ggmap)
library(rgdal)
library(rgeos)
library(maptools)
library (corrplot)
library(carData)
library(car)

```


#Lectura bases de datos
```{r}

basecovid <- read_csv("data/basecovid.csv")
MUN_COL <- read_excel("data/MUN_COL.xlsx")
BASE_COV19_IPM <- read_csv("data/BASE_COV19_IPM.csv")
BASE_COV19_IPM <- BASE_COV19_IPM %>% select(CodeM, DEN_POB) %>% group_by(CodeM) %>% distinct()
BASE_COV19_IPM = rename(BASE_COV19_IPM, c(CodeM ="COD_MUN"))
#BASE_COV19_IPM = rename(BASE_COV19_IPM, c( COD_MUN ="CodeM"))

MUN_COL_PREV<-left_join(MUN_COL,BASE_COV19_IPM, by="COD_MUN") 

rm(MUN_COL)
rm (BASE_COV19_IPM)

```

# Limpieza base de datos CASOS  COVID

#Fechas 

```{r}
basecovid$`fecha reporte web`<- as.Date(basecovid$`fecha reporte web`,format="%Y/%m/%d")
basecovid$`Fecha de notificación`<- as.Date(basecovid$`Fecha de notificación`,format="%m/%Y")
basecovid$`Fecha de diagnóstico`<- as.Date(basecovid$`Fecha de diagnóstico`,format="%m/%Y")
basecovid$`Fecha de inicio de síntomas`<- as.Date(basecovid$`Fecha de inicio de síntomas`,format="%m/%Y")
basecovid$`Fecha de muerte`<- as.Date(basecovid$`Fecha de muerte`,format="%m/%Y")
basecovid$`Fecha de recuperación`<- as.Date(basecovid$`Fecha de recuperación`,format="%m/%Y")
basecovid$año <- as.numeric(format(basecovid$`Fecha de diagnóstico`,"%Y"))
basecovid$mes <- as.numeric(format(basecovid$`Fecha de diagnóstico`,"%m"))


```


seleccionar solo año 2020 y 2021, y municipios elegidos 

```{r}
basecovid<-basecovid   %>% 
     filter(año %in% c("2020","2021"))  

basecovid$ind <- ifelse(is.element(basecovid$`Código DIVIPOLA municipio`, c(27086,94663,88001,88564,91263,91405,91407,91430,91460,91530,91536,91669,91798,94343,94883,94884,94885,94886,94887,94888,97511,97777,97889)),0,1)

basecovidfinal<-basecovid %>% 
     filter(ind %in% c(1))
```

## prueba  estructura largo 

```{r}




basecovidfinallarge<- basecovidfinal %>% select(`Fecha de notificación`, `Código DIVIPOLA departamento` , `Nombre departamento`,  `Código DIVIPOLA municipio`, `Nombre municipio` , Recuperado , `Fecha de diagnóstico`, `Fecha de recuperación`, `Fecha de muerte`, año ,  mes , ind  )

basecovidfinallarge$añomuer <- as.numeric(format(basecovidfinallarge$`Fecha de muerte`,"%Y"))
basecovidfinallarge$mesmuer <- as.numeric(format(basecovidfinallarge$`Fecha de muerte`,"%m"))

basecovidfinallarge$añorec <- as.numeric(format(basecovidfinallarge$`Fecha de recuperación`,"%Y"))
basecovidfinallarge$mesrec <- as.numeric(format(basecovidfinallarge$`Fecha de recuperación`,"%m"))


basecovidfinallarge$ID_Periodo <- ifelse(basecovidfinallarge$año=="2020" & basecovidfinallarge$mes=="3", 1,
         ifelse(basecovidfinallarge$año=="2020" & basecovidfinallarge$mes=="4", 2,
         ifelse(basecovidfinallarge$año=="2020" & basecovidfinallarge$mes=="5", 3,
         ifelse(basecovidfinallarge$año=="2020" & basecovidfinallarge$mes=="6", 4,       
         ifelse(basecovidfinallarge$año=="2020" & basecovidfinallarge$mes=="7", 5,       
         ifelse(basecovidfinallarge$año=="2020" & basecovidfinallarge$mes=="8", 6,       
         ifelse(basecovidfinallarge$año=="2020" & basecovidfinallarge$mes=="9", 7,       
         ifelse(basecovidfinallarge$año=="2020" & basecovidfinallarge$mes=="10", 8,       
         ifelse(basecovidfinallarge$año=="2020" & basecovidfinallarge$mes=="11", 9,       
         ifelse(basecovidfinallarge$año=="2020" & basecovidfinallarge$mes=="12", 10,
         ifelse(basecovidfinallarge$año=="2021" & basecovidfinallarge$mes=="1", 11,
          ifelse(basecovidfinallarge$año=="2021" & basecovidfinallarge$mes=="2", 12,
          ifelse(basecovidfinallarge$año=="2021" & basecovidfinallarge$mes=="3", 13,      
          ifelse(basecovidfinallarge$año=="2021" & basecovidfinallarge$mes=="4", 14,      
          ifelse(basecovidfinallarge$año=="2021" & basecovidfinallarge$mes=="5", 15,
          ifelse(basecovidfinallarge$año=="2021" & basecovidfinallarge$mes=="6", 16,
                 ifelse(basecovidfinallarge$año=="2021" & basecovidfinallarge$mes=="7", 17,
                        ifelse(basecovidfinallarge$año=="2021" & basecovidfinallarge$mes=="8", 18,
                        ifelse(basecovidfinallarge$año=="2021" & basecovidfinallarge$mes=="9", 19,
                        ifelse(basecovidfinallarge$año=="2021" & basecovidfinallarge$mes=="10", 20,
                        ifelse(basecovidfinallarge$año=="2021" & basecovidfinallarge$mes=="11", 21,
                               ifelse(basecovidfinallarge$año=="2021" & basecovidfinallarge$mes=="12", 22,  ifelse(basecovidfinallarge$año==""|basecovidfinallarge$mes=="", NA, 23))))))))))))))))))))))) 
  


Casos_Acum2<- basecovidfinallarge %>% select(ID_Periodo,`Código DIVIPOLA municipio`,  `Nombre municipio` , ind ) %>% group_by(`Código DIVIPOLA municipio`, ID_Periodo) %>% summarise(casos = sum(ind))

Casos_Acum2<- mutate(Casos_Acum2, Casos_Acum = cumsum(casos))


##%>% group_by(CodeM) %>% distinct()


cond_finall <- basecovidfinallarge %>% select(ID_Periodo, `Código DIVIPOLA municipio`, Recuperado, ind ) %>% group_by(`Código DIVIPOLA municipio`, ID_Periodo)


cond_finall[cond_finall=="fallecido"] <- "Fallecido"

cond_finall$muerto <- (if_else(condition = cond_finall$Recuperado == "Fallecido", true = 1, false = 0))


cond_finall$recuperado <- (if_else(condition = cond_finall$Recuperado == "Recuperado", true = 1, false = 0))

Muertos<- cond_finall %>% group_by(`Código DIVIPOLA municipio`, ID_Periodo)%>% summarise(Muertos  = sum(muerto))

Muertos<- mutate(Muertos, Muertos_Acum= cumsum(Muertos))

Recuperados<- cond_finall %>% group_by(`Código DIVIPOLA municipio`, ID_Periodo)%>% summarise(Recuperados  = sum(recuperado))


Recuperados<- mutate(Recuperados, Recuperados_Acum = cumsum(Recuperados))



write.table(Casos_Covid_19_Combinado, "casosacum.xls")
write.table(Muertos, "Muertos.xls")
write.table(Recuperados, "Recuperados.xls")



```


```{r}
basecovidfinal$Sexo[basecovidfinal$Sexo =="f"] <- "F"
basecovidfinal$Sexo[basecovidfinal$Sexo =="m"] <- "M"

basecovidfinal$Edad_años <- round(if_else(condition = basecovidfinal$`Unidad de medida de edad` == 2,
                            true = basecovidfinal$Edad/12,
                            false = if_else(condition = basecovidfinal$`Unidad de medida de edad` == 3,
                                            true = basecovidfinal$Edad/365,
                                            false = basecovidfinal$Edad)),4)


table1(~ Sexo + Edad_años + `Tipo de contagio`   | año, data=basecovidfinal, overall="Total")



```

Codigos de municipios a excluir

```{r}

### Por ser areas no municipalizadas, San Andres, Providencia y Barrancominas. 
#excluidos<- c(27086,94663,88001,88564,91263,91405,91407,91430,91460,91530,91536,91669,91798,94343,94883,94884,94885,94886,94887,94888,97511,97777,97889)


```



#BASE DE DATOS DE MUNICIPIOS 


# Tablas de municipios 


```{r}
MUN_COL_PREV$Densidad_pob <- (if_else(condition = is.na(MUN_COL_PREV$DEN_POB) == TRUE , true = MUN_COL_PREV$POB_Total_2020/MUN_COL_PREV$`Superficie Km2`, false =MUN_COL_PREV$DEN_POB ))

```


#Distribucion de casos por Promedio de edad por municipio 

```{r}

Edad<- basecovidfinal %>% select(`Código DIVIPOLA municipio`,Edad_años ) %>% group_by(`Código DIVIPOLA municipio`)%>% summarise(Promedio_Edad_años = mean(Edad_años))

MUN_COL_PREV<-merge (MUN_COL_PREV,Edad, by.x="COD_MUN", by.y="Código DIVIPOLA municipio") 

```

#Distribucion de casos por sexo por municpio 
```{r}
Sexo <- basecovidfinal %>% select(`Código DIVIPOLA municipio`,Sexo ) %>% group_by(`Código DIVIPOLA municipio`)

Sexo$Femenino <- (if_else(condition = Sexo$Sexo== "F", true = 1, false = 0))


Sexo_mun<- Sexo %>% select(`Código DIVIPOLA municipio`, Femenino ) %>% group_by(`Código DIVIPOLA municipio`)%>% summarise(Proporcion_Mujeres  = mean(Femenino))

MUN_COL_PREV<-merge (MUN_COL_PREV,Sexo_mun, by.x="COD_MUN", by.y="Código DIVIPOLA municipio") 


```


#numero de casos por municipio

```{r}
casos_mun<-as.data.frame(table(basecovidfinal$`Código DIVIPOLA municipio`))
#casos_mun = rename(casos_mun, c(Total_casos= "Freq"))
casos_mun = rename(casos_mun, c(Freq= "Total_casos"))


MUN_COL_PREV<-merge(MUN_COL_PREV,casos_mun, by.x="COD_MUN", by.y="Var1")  

```


Tasas: incidencia, mortalidad, letalidad  por Municipio 

```{r}
cond_final <- basecovidfinal %>% select(`Código DIVIPOLA municipio`, Recuperado) %>% group_by(`Código DIVIPOLA municipio`)


cond_final[cond_final=="fallecido"] <- "Fallecido"

cond_final$muerto <- (if_else(condition = cond_final$Recuperado == "Fallecido", true = 1, false = 0))


cond_final$recuperado <- (if_else(condition = cond_final$Recuperado == "Recuperado", true = 1, false = 0))

cond_final_mun<- cond_final %>% group_by(`Código DIVIPOLA municipio`)%>% summarise(Num_muertos  = sum(muerto))


cond_final_den<- cond_final %>% group_by(`Código DIVIPOLA municipio`)%>% summarise(Num_recup  = sum(recuperado))

cond_final_den$total<-cond_final_mun$Num_muertos+cond_final_den$Num_recup
  
MUN_COL_PREV<-merge (MUN_COL_PREV,cond_final_mun, by.x="COD_MUN", by.y="Código DIVIPOLA municipio") 



##Densidad de  incidencia (NUM CASOS/ total poblacion  )

MUN_COL_PREV$Densidad_incidencia_x10.000<-round(MUN_COL_PREV$Total_casos/MUN_COL_PREV$POB_Total*10000, 2)  

##Tasa mortalidad (muertos/ total poblacion  )

MUN_COL_PREV$Tasa_mortalidad_x10.000<-round(MUN_COL_PREV$Num_muertos/  MUN_COL_PREV$POB_Total_2020*10000, 2) 

##Tasa Letalidad (muertos/ recuperados -muertos )

MUN_COL_PREV$Tasa_letalidad_x10.000<-round (MUN_COL_PREV$Num_muertos/cond_final_den$total*10000) 

```


#  primeros municipios con mayor tasa  de incidencia

```{r}
MUN_COL_PREV<-MUN_COL_PREV %>% arrange(desc(Densidad_incidencia_x10.000))
```



```{r}
library(dplyr)
datosmun<-basecovidfinal %>% group_by  (`Código DIVIPOLA municipio`, año) %>% count(mes)


datosmunprueba<-basecovidfinal %>% group_by(`Fecha de diagnóstico`,`Nombre municipio`, `Código DIVIPOLA municipio`)%>% count(`Nombre municipio`)


datosmun = rename(datosmun, c(COD_MUN="Código DIVIPOLA municipio"))
datosmun = rename(datosmun, c(`Código DIVIPOLA municipio`="COD_MUN"))
library(maditr)
casos_mes2<- dcast(datosmun, COD_MUN ~ año + mes, value.var = "n")


```



casos acumulados por tiempo

```{r}
Casos_acum<- basecovidfinal %>% select(`Fecha de diagnóstico`,`Código DIVIPOLA municipio`,  `Nombre municipio` , ind ) %>% group_by(`Código DIVIPOLA municipio`, `Fecha de diagnóstico`) %>% summarise(casos = sum(ind))

Casos_acum<- mutate(Casos_acum, freq.acumulative = cumsum(casos))

Casos_acum$casos_t<- mutate(Casos_acum, freq.acumulative = cumsum(casos))
```

```{r}
municipios=st_read ( "fuentes/mpio2/Munpio.shp")



municipios$COD_MUN<-as.numeric(municipios$MpCodigo)


municipios<-left_join(municipios, MUN_COL_PREV, by="COD_MUN")
```

##ANALISIS DESCRIPTIVO 

tasa de letalidad general 

```{r}
n_dead <- sum(MUN_COL_PREV$Num_muertos)
n_known_outcome <- sum(cond_final_den$total)
cfr <- n_dead / n_known_outcome *100

cfr_with_CI <- binom.confint(n_dead, n_known_outcome, method = "exact")


rm (cfr_with_CI)
rm(cond_final_den)
```

```{r}
plot(Casos_acum$`Fecha de diagnóstico`, Casos_acum$casos, type = "l",
     col = "lightblue", # Color
     lwd = 0.5, main = 'Casos Covid') 

plot(Casos_acum$`Fecha de diagnóstico`, Casos_acum$freq.acumulative, type = "l",
     col = "lightblue", # Color
     lwd = 0.5, main = 'Casos Covid')

```



# 1. base de demografia y poblacion 

%_poblacion_rural
%_poblacion_urbana
Densidad poblacional
POB_Total_2020	

 
```{r}
table1(~  `poblacion_ rural`+ poblacion_urbana + Densidad_pob  + POB_Total_2020  , data=MUN_COL_PREV, overall="Total")
```


```{r}
demog_pob<-MUN_COL_PREV %>%   select (  `poblacion_ rural`,poblacion_urbana, Densidad_pob, POB_Total_2020  )
corDp<-cor(demog_pob, method = c("kendall"), use = "na.or.complete")
corrplot(corDp, method = "color")
```

De acuerdo a la alta correlacion se dejara solo la poblacion rural 


%_poblacion_rural
```{r}

ggplot(data = municipios) +
  geom_sf(aes(fill = `poblacion_ rural`)) + 
  scale_fill_gradient(low = "blue", high = "green", na.value = "gray") 
```

%_poblacion_urbana
```{r}

ggplot(data = municipios) +
  geom_sf(aes(fill = poblacion_urbana)) + 
  scale_fill_gradient(low = "blue", high = "green", na.value = "gray") 
```







# 2. Climatica y geografica
Superficie Km2
Altitud media m,s,n,m	
Temperatura °C

```{r}
table1(~  `Temperatura °C` + `Altitud media m,s,n,m`, data=MUN_COL_PREV, overall="Total")
```


```{r}
Climgeo<-MUN_COL_PREV %>%   select ( `Temperatura °C` , `Altitud media m,s,n,m` , `Superficie Km2`  )
corCG<-cor(Climgeo, method = c("kendall"), use = "na.or.complete")
corrplot(corCG, method = "color")
```


Por la correlacion entre altitud  y temperatura se dejara la variable altitud dado que es mas estable.

Mapa altitud media 


```{r}
ggplot(data = municipios) +
  geom_sf()

ggplot(data = municipios) +
  geom_sf(aes(fill = `Altitud media m,s,n,m`)) + 
  scale_fill_gradient(low = "dark green", high = "blue", na.value = "dark gray")
```


Mapa temperatura 


```{r}

ggplot(data = municipios) +
  geom_sf(aes(fill = `Temperatura °C`)) + 
  scale_fill_gradient(low = "yellow", high = "red", na.value = "gray")
```



# 3. Pobreza
NBI_Area_Urbana
NBI_Area_rural
Población_condición_miseria
IPM
DIMENSIÓN CALIDAD DE VIDA

```{r}
table1(~   NBI_Area_rural+ NBI_Area_Urbana + Población_condición_miseria + IPM_MUN 
       + `DIMENSIÓN CALIDAD DE VIDA`  , data=MUN_COL_PREV, overall="Total")
```


```{r}
pobreza<-MUN_COL_PREV %>%   select ( NBI_Area_rural, NBI_Area_Urbana , Población_condición_miseria , IPM_MUN ,`DIMENSIÓN CALIDAD DE VIDA` )

corPob<-cor(pobreza, method = c("kendall"), use = "na.or.complete")
corrplot(corPob, method = "color")
```


NBI_Area_rural

```{r}

ggplot(data = municipios) +
  geom_sf(aes(fill = NBI_Area_rural)) + 
  scale_fill_gradient(low = "green", high = "red", na.value = "gray") 

```


NBI_Area_Urbana

```{r}

ggplot(data = municipios) +
  geom_sf(aes(fill = NBI_Area_Urbana)) + 
  scale_fill_gradient(low = "green", high = "red", na.value = "gray") 

```


IPM_2020

```{r}

ggplot(data = municipios) +
  geom_sf(aes(fill = IPM_MUN)) + 
  scale_fill_gradient(low = "green", high = "red", na.value = "gray") 

```


DIMENSIÓN CALIDAD DE VIDA

```{r}


ggplot(data = municipios) +
  geom_sf(aes(fill = `DIMENSIÓN CALIDAD DE VIDA` )) + 
  scale_fill_gradient(low = "blue", high = "green", na.value = "gray")

```

# 4. Desempeño fiscal-Importancia Económica Municipal
Indice_Desempeño_Fiscal
DIMENSIÓN INSTITUCIONAL
DIMENSION URBANA 



```{r}
table1(~  `Valor Agregado Municipal (VA)`+ `DIMENSIÓN ECONOMICA`+Indice_Desempeño_Fiscal+ `DIMENSIÓN INSTITUCIONAL` + `DIMENSION URBANA`  , data=MUN_COL_PREV, overall="Total")

```



```{r}
desempefis<-MUN_COL_PREV %>%   select (  Indice_Desempeño_Fiscal,`DIMENSIÓN INSTITUCIONAL` , `DIMENSION URBANA`, `Valor Agregado Municipal (VA)`,`DIMENSIÓN ECONOMICA`   )

cordfis<-cor(desempefis, method = c("kendall"), use = "na.or.complete")
 corrplot(cordfis, method = "color")
```


Mapa Indice_Desempeño_Fiscal

```{r}

ggplot(data = municipios) +
  geom_sf(aes(fill = Indice_Desempeño_Fiscal ))

```

DIMENSIÓN INSTITUCIONAL

```{r}
ggplot(data = municipios) +
  geom_sf(aes(fill = `DIMENSIÓN INSTITUCIONAL` )) + 
  scale_fill_gradient(low = "blue", high = "green", na.value = "gray")

```


DIMENSION URBANA 

```{r}


ggplot(data = municipios) +
  geom_sf(aes(fill = `DIMENSION URBANA` )) + 
  scale_fill_gradient(low = "blue", high = "green", na.value = "gray")

```



`Valor Agregado Municipal (VA)`

```{r}
ggplot(data = municipios) +
  geom_sf(aes(fill = `Valor Agregado Municipal (VA)` )) + 
  scale_fill_gradient(low = "blue", high = "green", na.value = "gray")

```


DIMENSIÓN ECONOMICA

```{r}
ggplot(data = municipios) +
  geom_sf(aes(fill = `DIMENSIÓN ECONOMICA` )) + 
  scale_fill_gradient(low = "blue", high = "green", na.value = "gray")

```

# 6.  Conflicto armado y seguridad ciudadana
Número acumulado de personas desplazadas expulsadas
Número acumulado de personas desplazadas recibidas
Número de personas desplazadas

```{r}
table1(~ personas_desplazadas_expulsadas + personas_desplazadas_recibidas + personas_desplazadas, data=MUN_COL_PREV, overall="Total")
```


```{r}
conflict<-MUN_COL_PREV %>%   select (  personas_desplazadas_expulsadas , personas_desplazadas_recibidas , personas_desplazadas )

corconf<-cor(conflict, method = c("kendall"), use = "na.or.complete")
 corrplot(corconf, method = "color")
```


Número acumulado de personas desplazadas expulsadas

```{r}
ggplot(data = municipios) +
  geom_sf(aes(fill = personas_desplazadas_expulsadas )) + 
  scale_fill_gradient(low = "blue", high = "green", na.value = "gray")

```

Número acumulado de personas_desplazadas_recibidas

```{r}
ggplot(data = municipios) +
  geom_sf(aes(fill = personas_desplazadas_recibidas )) + 
  scale_fill_gradient(low = "blue", high = "green", na.value = "gray")

```


Número acumulado personas_desplazadas

```{r}
ggplot(data = municipios) +
  geom_sf(aes(fill = personas_desplazadas )) + 
  scale_fill_gradient(low = "blue", high = "green", na.value = "gray")

```

#7. Salud
Prevalencia de HTA
Prevalencia de DM
Prevalencia de ERC
Tasa de mortalidad (x cada 1.000 habitantes)
Afiliados_SGSSS
densidad de incidencia de Covid
Tasa de letalidad de Covid
Tasa de mortalidad de Covid 
Promedio de edad casos covid
Proporcion de mujeres

```{r}
table1(~ PRE_HTA + PRE_DM + PRE_ERC + Tasa_mortalidadGEN + Afiliados_SGSSS + Densidad_incidencia_x10.000 + Tasa_letalidad_x10.000 + Tasa_mortalidad_x10.000, data=MUN_COL_PREV, overall="Total")
```


```{r}
salud<-MUN_COL_PREV %>%   select (  PRE_HTA , PRE_DM ,PRE_ERC , Tasa_mortalidadGEN , Afiliados_SGSSS )

corsal<-cor(salud, method = c("kendall"), use = "na.or.complete")
 corrplot(corsal, method = "color")
```


PREVALENCIA HTA 

```{r}

ggplot(data = municipios) +
  geom_sf(aes(fill = PRE_HTA)) + 
  scale_fill_gradient(low = "green", high = "red", na.value = "gray") 

```

PREVALENCIA DM

```{r}

ggplot(data = municipios) +
  geom_sf(aes(fill = PRE_DM)) + 
  scale_fill_gradient(low = "Orange", high = "Red", na.value = "gray") 

```

PREVALENCIA ERC

```{r}

ggplot(data = municipios) +
  geom_sf(aes(fill = PRE_ERC)) + 
  scale_fill_gradient(low = "Beige", high = "Red", na.value = "gray") 

```



Tasa_mortalidadGEN

```{r}

ggplot(data = municipios) +
  geom_sf(aes(fill = Tasa_mortalidadGEN)) + 
  scale_fill_gradient(low = "green", high = "red", na.value = "gray") 

```




Promedio de edad casos covid

```{r}

ggplot(data = municipios) +
  geom_sf(aes(fill = Promedio_Edad_años)) + 
  scale_fill_gradient(low = "green", high = "red", na.value = "gray") 

```

Proporcion de mujeres

```{r}

ggplot(data = municipios) +
  geom_sf(aes(fill = Proporcion_Mujeres)) + 
  scale_fill_gradient(low = "green", high = "red", na.value = "gray") 

```

Número muertos 

```{r}

ggplot(data = municipios) +
  geom_sf(aes(fill = Num_muertos)) + 
  scale_fill_gradient(low = "blue", high = "green", na.value = "gray") 

```
Densidad de incidencia

```{r}
ggplot(data = municipios) +
  geom_sf(aes(fill = Densidad_incidencia_x10.000)) + 
  scale_fill_gradient(low = "blue", high = "green", na.value = "gray") 

```

Tasa de mortalidad

```{r}
ggplot(data = municipios) +
  geom_sf(aes(fill = Tasa_mortalidad_x10.000)) + 
  scale_fill_gradient(low = "green", high = "red", na.value = "gray") 

```
Tasa de letalidad

```{r}
ggplot(data = municipios) +
  geom_sf(aes(fill = Tasa_letalidad_x10.000)) + 
  scale_fill_gradient(low = "green", high = "red", na.value = "gray90") 

```




#vivienda y acceso de servicios de salud

Cobertura_acueducto
Cobertura_alcantarillado
Penetracion_Internet
# Educación
Cobertura_bruta_educación_Total
```{r}
table1(~ Cobertura_acueducto + Cobertura_alcantarillado + Penetracion_Internet + Cobertura_bruta_educación , data=MUN_COL_PREV, overall="Total")
```

```{r}
vivienda<-MUN_COL_PREV %>%   select (  Cobertura_acueducto , Cobertura_alcantarillado , Penetracion_Internet, Cobertura_bruta_educación )

corviv<-cor(vivienda, method = c("kendall"), use = "na.or.complete")
 corrplot(corviv, method = "color")
```


mapa penetracion internet

```{r}
ggplot(data = municipios) +
  geom_sf(aes(fill = Penetracion_Internet ))

```

mapa Cobertura_alcantarillado

```{r}
ggplot(data = municipios) +
  geom_sf(aes(fill = Cobertura_alcantarillado ))

```



```{r}
ggplot(data = municipios) +
  geom_sf(aes(fill = Cobertura_bruta_educación ))

```



# movilidad

Aeropuerto_Nal	
Aeropuerto_Inal	
Número de destinos internacionales

```{r}
table1(~   Aeropuerto_Inal + Aeropuerto_Nal + `Número de destinos internacionales`, data=MUN_COL_PREV, overall="Total")
```


Mapa aeropuerto 


```{r}
ggplot(data = municipios) +
  geom_sf(aes(fill = `Número de destinos internacionales`), color= "black")
```

# DESCPRIPTIVO DE OBJETIVO 1 




```{r}
OBJ1<-MUN_COL_PREV %>% arrange(desc(Densidad_incidencia_x10.000))%>% slice(1:10)

summary(OBJ1$Total_casos)

table1( ~  `poblacion_ rural`+ poblacion_urbana + Densidad_pob  + POB_Total_2020 |MPIO  , data=OBJ1, overall="Total")


```







## Analisis de casos de COVID 19

casos por mes y municipio para el año 2020-2021



EXCLUIDOS

```{r}
Municipios_Excluidos_copia <- read_excel("fuentes/Municipios Excluidos - copia.xlsx")
municipios<-left_join(municipios,Municipios_Excluidos_copia, by="COD_MUN")


```


Mapa de Municipios excluidos

```{r}

ggplot(data = municipios) +
  geom_sf(aes(fill = EXCLUIDO))  

```

#supuesto de normalidad

```{r}

#supuesto de normalidad

shapiro.test(municipios$`Altitud media m,s,n,m`)
shapiro.test(municipios$`Temperatura °C`)
shapiro.test(municipios$`Valor Agregado Municipal (VA)`)
shapiro.test(municipios$IPM_MUN)
shapiro.test(municipios$PRE_HTA)
shapiro.test(municipios$PRE_DM)
shapiro.test(municipios$PRE_ERC)

shapiro.test(municipios$Densidad_pob)
shapiro.test(municipios$Promedio_Edad_años)
shapiro.test(municipios$Densidad_incidencia_x10.000)
shapiro.test(municipios$Tasa_mortalidad_x10.000 )
shapiro.test(municipios$Tasa_letalidad_x10.000 )

```

#Correlacion 

```{r}
#mtcars %>% cor(method="pearson") %>% round(digits=2) -> cortod
#mat_cor
```


```{r}
#cortod <-MUN_COL_PREV %>%  select ( `Altitud media m,s,n,m`,`Temperatura °C` ,  `Valor Agregado Municipal (VA)` , Penetracion_Internet , Indice_Desempeño_Fiscal ,`DIMENSION URBANA`  ,`DIMENSIÓN ECONOMICA` , `DIMENSIÓN CALIDAD DE VIDA` ,  `DIMENSIÓN INSTITUCIONAL` , IPM_MUN , NBI_Area_Urbana , NBI_Area_rural, Población_condición_miseria , Afiliados_SGSSS , `poblacion_ rural` , poblacion_urbana , Cobertura_acueducto  , Cobertura_alcantarillado , Cobertura_bruta_educación ,  Tasa_mortalidadGEN , personas_desplazadas_expulsadas , personas_desplazadas_recibidas ,personas_desplazadas , PRE_HTA , PRE_DM , PRE_ERC , Densidad_pob)


MUN_COL_PREV$diciembre_porc_vac


cortod <-MUN_COL_PREV %>%  select ( `Altitud media m,s,n,m`,   Penetracion_Internet , Indice_Desempeño_Fiscal ,   `DIMENSIÓN INSTITUCIONAL` , IPM_MUN , Afiliados_SGSSS , poblacion_urbana , Cobertura_bruta_educación ,  Tasa_mortalidadGEN , personas_desplazadas_expulsadas ,   PRE_DM , PRE_ERC , Densidad_pob, marzo_porc_vac, diciembre_porc_vac )


corvar<- cor(cortod, method = c("spearman"), use = "na.or.complete")%>% round(digits=1)

```


```{r}
glm1<-lm(Densidad_incidencia_x10.000~ `Altitud media m,s,n,m` + `Temperatura °C` ,data=MUN_COL_PREV)
options(scipen = 9990) 
vif(glm1)
```

correlacion de altitud y temperatura: -0.9 dado que la altitud es mas estable se excluye temperatura 

dimension economica y valor agregado municipal 0.9. , dado que la dimension economica tiene informacion de 2014 se excluye, se deja la informacion de valor agregado 

Afiliados_SGSSS y valor agregado municipal  0.7, teniendo en cuenta la relacion con salud se excluye el valor agregado municipal

Afiliados_SGSSS Y  Número acumulado de personas desplazadas recibidas 0,8,  teniendo en cuenta la relacion con salud se excluye  Número acumulado de personas desplazadas recibidas fuente 2017.

se excluye DIMENSION URBANA: poblacion_ rural -0.8   poblacion_urbana 0.8, la informacion de dimension urbana es del 2014, por tanto se deja poblacion 


IPM y dimension calidad de vida -0.9 ; dimension calidad de vida y Población_condición_miseria 0.6; se excluye  dimension calidad de vida fuente 2014.



IPM: NBI_Area_Urbana 0,7; NBI_Area_rural 0,8; Población_condición_miseria 0,8. 


IPM Cobertura_acueducto - Cobertura_alcantarillado -0.7 


Número de personas desplazadas y Número acumulado de personas desplazadas expulsadas 0.8 se excluye desplazadas por que tiene 365 municipios con cero 0

Prevalencia de hipertension y diabetes 0.8 , se escluye HTA 




BASE COMPLETA DE MUNICIPIOS- (informacion mapas, informacion de variables, informacion casos por mes)


```{r}
municipios<-left_join(municipios,casos_mes2, by="COD_MUN")


municipios <- municipios %>%  filter(COD_DEPT!= "88")


```


#modelos



# MODELO LINEAL GENERALIZADO 


```{r}

mod1<- glm(Densidad_incidencia_x10.000 ~   Aeropuerto_Nal +`Altitud media m,s,n,m`+   Penetracion_Internet + Indice_Desempeño_Fiscal +  `DIMENSIÓN INSTITUCIONAL` + IPM_MUN + Afiliados_SGSSS + poblacion_urbana + Cobertura_bruta_educación + Tasa_mortalidadGEN + personas_desplazadas_expulsadas +   PRE_DM + PRE_ERC + Densidad_pob+ I(Densidad_pob^2) , data = MUN_COL_PREV)

summary(mod1)


mod2s<- glm(Densidad_incidencia_x10.000 ~   Aeropuerto_Nal +`Altitud media m,s,n,m`+   Penetracion_Internet + Indice_Desempeño_Fiscal +  IPM_MUN + Afiliados_SGSSS + poblacion_urbana + Cobertura_bruta_educación + Tasa_mortalidadGEN + personas_desplazadas_expulsadas +  PRE_ERC + Densidad_pob+ I(Densidad_pob^2) , data = MUN_COL_PREV)

summary(mod2s)

anova(mod1,mod2s)




mod2depurado<- glm(  Total_casos~ Aeropuerto_Nal +`Altitud media m,s,n,m`+   Penetracion_Internet + Indice_Desempeño_Fiscal +  `DIMENSIÓN INSTITUCIONAL` + IPM_MUN + Afiliados_SGSSS + poblacion_urbana + Cobertura_bruta_educación + Tasa_mortalidadGEN + personas_desplazadas_expulsadas +   PRE_DM + PRE_ERC + Densidad_pob   +  I (Densidad_pob ^ 2) + offset(log(POB_Total_2020)), family=poisson, data = MUN_COL_PREV)

summary(mod2depurado)

 
```






#REVISION DESCRIPTIVA DE VARIABLES PARA INCLUIR EN EL MODELO 

Aeropuerto_Nal +`Altitud media m,s,n,m`+   Penetracion_Internet + Indice_Desempeño_Fiscal +  IPM_MUN + Afiliados_SGSSS + poblacion_urbana + Cobertura_bruta_educación + Tasa_mortalidadGEN + personas_desplazadas_expulsadas +  PRE_ERC + Densidad_pob+


`Altitud media m,s,n,m` 




```{r}
plot(MUN_COL_PREV$`Altitud media m,s,n,m`, MUN_COL_PREV$Densidad_incidencia_x10.000)

xalm=unique(quantile(MUN_COL_PREV$`Altitud media m,s,n,m`,0:10/10))


MUN_COL_PREV$CATALT<-   cut(x = MUN_COL_PREV$`Altitud media m,s,n,m`, breaks = xalm, labels = xalm[-1])

plot(MUN_COL_PREV$CATALT, MUN_COL_PREV$Densidad_incidencia_x10.000)

```


    
    

** Penetracion_Internet:  Proporción hogares con acceso a internet en el municipio	Porcentaje

```{r}
x=unique(quantile(MUN_COL_PREV$Penetracion_Internet,0:10/10))

MUN_COL_PREV$CATPINT<-   cut(x = MUN_COL_PREV$Penetracion_Internet, breaks = x,labels = x[-1])

plot(MUN_COL_PREV$CATPINT, MUN_COL_PREV$Densidad_incidencia_x10.000)

```


```{r}


table1(~ Densidad_incidencia_x10.000| CATPINT,data = MUN_COL_PREV, 
       rowlabelhead = "Variables",
       caption = "promedio penetracion de internet",
       footnote = "Fuente: ''",
       overall = "General"       )


            

```





** IPM_MUN Incidencia de la pobreza según índice de la pobreza multidimensional

```{r}

xipm=unique(quantile(MUN_COL_PREV$IPM_MUN,0:10/10))

MUN_COL_PREV$CATIPM_MUN<-   cut(x = MUN_COL_PREV$IPM_MUN, breaks = xipm,labels = xipm[-1])

table1(~ Densidad_incidencia_x10.000| CATIPM_MUN,data = MUN_COL_PREV, 
       rowlabelhead = "Variables",
       caption = "IPM_MUN ",
       footnote = "Fuente: ''",
       overall = "General"       )

                             

plot(MUN_COL_PREV$CATIPM_MUN, MUN_COL_PREV$Densidad_incidencia_x10.000)
```



**Cobertura_bruta_educación Porcentaje (el valor está multiplicado por 100)


```{r}

xcbe=unique(quantile(MUN_COL_PREV$Cobertura_bruta_educación,0:10/10))

MUN_COL_PREV$CATCBE<-   cut(x = MUN_COL_PREV$Cobertura_bruta_educación, breaks = xcbe,labels = xcbe[-1])

table1(~ Densidad_incidencia_x10.000| CATCBE,data = MUN_COL_PREV, 
       rowlabelhead = "Variables",
       caption = "Cobertura_bruta_educación Porcentaje",
       footnote = "Fuente: ''",
       overall = "General"       )
plot(MUN_COL_PREV$CATCBE, MUN_COL_PREV$Densidad_incidencia_x10.000)

```

 personas_desplazadas_expulsadas Personas


```{r}
xpde=unique(quantile(MUN_COL_PREV$personas_desplazadas_expulsadas,0:10/10))

MUN_COL_PREV$CATPDE<-   cut(x = MUN_COL_PREV$personas_desplazadas_expulsadas, breaks = xpde,labels = xpde[-1])

table1(~ Densidad_incidencia_x10.000| CATPDE,data = MUN_COL_PREV, 
       rowlabelhead = "Variables",
       caption = "personas_desplazadas_expulsadas Personas",
       footnote = "Fuente: ''",
       overall = "General"       )

                         

plot(MUN_COL_PREV$CATPDE, MUN_COL_PREV$Densidad_incidencia_x10.000)

```



PRE_ERC

```{r}
xpreerc=unique(quantile(MUN_COL_PREV$PRE_ERC,0:10/10))

MUN_COL_PREV$CATPREERC<-   cut(x = MUN_COL_PREV$PRE_ERC, breaks = xpreerc,labels = xpreerc[-1])

table1(~ Densidad_incidencia_x10.000| CATPREERC,data = MUN_COL_PREV, 
       rowlabelhead = "Variables",
       caption = "PRE_ERC",
       footnote = "Fuente: ''",
       overall = "General"       )

plot(MUN_COL_PREV$CATPREERC, MUN_COL_PREV$Densidad_incidencia_x10.000)

```


Densidad_pob 

```{r}
xdenpob=unique(quantile(MUN_COL_PREV$Densidad_pob,0:10/10))

MUN_COL_PREV$CATDENPOB<-   cut(x = MUN_COL_PREV$Densidad_pob, breaks = xdenpob,labels = xdenpob[-1])

table1(~ Densidad_incidencia_x10.000| CATDENPOB,data = MUN_COL_PREV, 
       rowlabelhead = "Variables",
       caption = "DENSIDAD POB",
       footnote = "Fuente: ''",
       overall = "General"       )


plot(MUN_COL_PREV$CATDENPOB, MUN_COL_PREV$Densidad_incidencia_x10.000)

plot(MUN_COL_PREV$Densidad_pob, MUN_COL_PREV$Densidad_incidencia_x10.000)

plot(MUN_COL_PREV$CATDENPOB, MUN_COL_PREV$Total_casos)


```



 Afiliados_SGSSS
 
    
```{r}

xaf=unique(quantile(MUN_COL_PREV$Afiliados_SGSSS,0:10/10))

MUN_COL_PREV$CATAFI<-   cut(x = MUN_COL_PREV$Afiliados_SGSSS, breaks = xaf,labels = xaf[-1])

plot(MUN_COL_PREV$CATAFI, MUN_COL_PREV$Densidad_incidencia_x10.000)

```
    
`DIMENSIÓN INSTITUCIONAL`
    
       
```{r}

plot(MUN_COL_PREV$`DIMENSIÓN INSTITUCIONAL`, MUN_COL_PREV$Densidad_incidencia_x10.000)

xdimi=unique(quantile(MUN_COL_PREV$`DIMENSIÓN INSTITUCIONAL`,0:10/10))

MUN_COL_PREV$CATDIMINS<-   cut(x = MUN_COL_PREV$`DIMENSIÓN INSTITUCIONAL`, breaks = xdimi,labels = xdimi[-1])

plot(MUN_COL_PREV$CATDIMINS, MUN_COL_PREV$Densidad_incidencia_x10.000)

``` 
   
   
    
    
Cobertura_acueducto  
    
    
```{r}

plot(MUN_COL_PREV$Cobertura_acueducto , MUN_COL_PREV$Densidad_incidencia_x10.000)

xcoac=unique(quantile(MUN_COL_PREV$Cobertura_acueducto,0:10/10))

MUN_COL_PREV$CATCOBERTUR<-   cut(x = MUN_COL_PREV$Cobertura_acueducto, breaks = xcoac,labels = xcoac[-1])

plot(MUN_COL_PREV$CATCOBERTUR, MUN_COL_PREV$Densidad_incidencia_x10.000)

```




Tasa_mortalidadGEN 
    
    
```{r}

plot(MUN_COL_PREV$Tasa_mortalidadGEN , MUN_COL_PREV$Densidad_incidencia_x10.000)

xTM=unique(quantile(MUN_COL_PREV$Tasa_mortalidadGEN,0:10/10))


MUN_COL_PREV$CATTASMOR<-   cut(x = MUN_COL_PREV$Tasa_mortalidadGEN, breaks = xTM,labels = xTM[-1])

plot(MUN_COL_PREV$CATTASMOR, MUN_COL_PREV$Densidad_incidencia_x10.000)

```
  
  
  
  
  
  
  #CORRELACION ESPACIAL

```{r}
library(maptools) 
gpclibPermit()

## (clases) para la representación de datos espaciales en el R
require(sp)  
## funciones de análisis de datos de área
require(spdep)

## funciones para facilitar la división de datos en clases por varios criterios

require(classInt) 
require(sf) 

## funciones utilizadas para crear paletas de colores en visualización de mapas

require(RColorBrewer)
par.ori <- par(no.readonly=TRUE)


```

```{r}

coords <- coordinates(as((municipios), 'Spatial'))
rook_Col <- poly2nb(as(municipios, 'Spatial'), queen = FALSE)
```

```{r}
nb_to_df <- function(nb, coords){
  x <- coords[, 1]
  y <- coords[, 2]
  n <- length(nb)

  cardnb <- card(nb)
  i <- rep(1:n, cardnb)
  j <- unlist(nb)
  return(data.frame(x = x[i], xend = x[j],
                    y = y[i], yend = y[j]))
}
```

Torre

```{r}

rook_rook_Col_df <- nb_to_df(rook_Col, coords)
```


# estructura TORRE 

```{r}
ggplot(municipios) +
  geom_sf()+
  geom_point(data = rook_rook_Col_df,
             mapping = aes(x = x, y = y))+
  geom_segment(data = rook_rook_Col_df,
               mapping = aes(x = x, xend = xend, y = y, yend = yend))+
  labs(x = "",y = "")
```

Criterio Queen (de la Reina)

```{r}
queen_Col <- poly2nb(as(municipios, 'Spatial'), queen = T)

queen_Col_df <- nb_to_df(queen_Col, coords)
```

```{r}
ggplot(municipios) +
  geom_sf()+
  geom_point(data = queen_Col_df,
             mapping = aes(x = x, y = y))+
  geom_segment(data = queen_Col_df,
               mapping = aes(x = x, xend = xend, y = y, yend = yend))+
  labs(x = "", y = "")
```

```{r}
kn_COL <- knn2nb(knearneigh(coords, k = 6))
kn_COL_df <- nb_to_df(kn_COL,coords)

ggplot(municipios) +
  geom_sf()+
  geom_point(data = kn_COL_df, mapping = aes(x = x, y = y))+
  geom_segment(data = kn_COL_df,
               mapping = aes(x = x, xend = xend, y = y, yend = yend))+
  labs(x = "", y = "")


```


INDICE DE MORAN ESTRUCTURA REINA 


```{r}
queen_col_lw <- nb2listw(queen_Col, zero.policy = TRUE)
#global

moran.test(municipios$Densidad_incidencia_x10.000, listw = queen_col_lw, zero.policy = TRUE , alternative = "two.side")






```

INDICE DE MORAN ESTRUCTURA TORRE 

```{r}
rook_col_lw <- nb2listw(rook_Col, zero.policy = TRUE)

moran.test(municipios$Densidad_incidencia_x10.000, listw = rook_col_lw, zero.policy = TRUE)

```

```{r}
geary.test(municipios$Densidad_incidencia_x10.000, listw = queen_col_lw, zero.policy = TRUE , alternative = "two.side")
```


como hacer un cuadro de mapas. ??????

```{r}
ggplot(data = municipios) +
  geom_sf(aes(fill = `2020_4`)) + 
  scale_fill_gradient(low = "blue", high = "green", na.value = "gray90") +
  labs(title = "Número de casos  de Covid en los Municipios de Colombia ", 
           caption = "Datos: ", y = NULL, x = NULL)
```




```{r}
(cond_final)
rm(Edad)
rm(cond_final_mun)
rm(basecovid)
rm(casos_mun)
rm(Sexo)
rm(Sexo_mun)
rm(datosmun)
rm(casos_mes2)
rm(Municipios_Excluidos_copia)

```



## INTERACCION ESPACIO TEMPORAL 

```{r}
library(spdep)
library(rgdal)
library(readxl)
library(RColorBrewer)
library(classInt)
library(maptools)
library(tidyverse)
library(lubridate)
library(pgirmess)
library(quantmod)
library(ggplot2)
library(astsa)
library(shiny)
library(readr)
library(leaflet)
library(ggplot2)
library(dplyr)
library(INLA)
require(splancs)
require(sp)
require(fields)
require(lattice)
require(abind)



```


```{r}
# Leer datos

library(maptools)

col.gen <-  readShapePoly("fuentes/mpio2/Munpio.shp")
temp <- poly2nb(col.gen)
nb2INLA("col.graph", temp)
col.adj <- paste(getwd(),"/col.graph",sep="")

library(inla.read.graph)

H <- inla.read.graph(filename="col.graph")
image(inla.graph2matrix(H),xlab="",ylab="")


##debo especificar a y??

formula <- Densidad_incidencia_x10.000 ~ 1 + f(ID, model="bym",graph=col.adj)

mod.suicides <- inla(formula,family="poisson",
data=MUN_COL_PREV,E=E,
control.compute=list(dic=TRUE))


mod.intI_P_C <- inla(formula.intI_C,family="poisson",data=Casos_Covid_19_Combinado,
                     E=Casos_Covid_19_Combinado$Pob, control.predictor = list(link=Link),
                     control.compute=list(dic=TRUE,cpo=TRUE,waic=TRUE))

```





#Replica 

require(INLA)
inla.setOption(scale.model.default=FALSE)
library(readxl)
require(gstat)
require(geoR)
require(fields)
require(maptools)
require(lattice)
require(spdep)
library(dplyr)

Casos_Covid_19_Combinado <- read_excel("D:/MAESTRIA BIOESTADISITICA/TESIS/BASE DE DATOS/TESIS/data/Casos_Covid_19_Combinado.xlsx")

municipios=st_read ( "D:/MAESTRIA BIOESTADISITICA/TESIS/BASE DE DATOS/TESIS/fuentes/mpio2/Munpio.shp")



municipios$CodeM<-as.character(municipios$MpCodigo)





muncol.gen <- readShapePoly("D:/MAESTRIA BIOESTADISITICA/TESIS/BASE DE DATOS/TESIS/fuentes/mpio2/Munpio.shp")
# colombia 1.100


muncol.gen$CodeM<-as.numeric (muncol.gen$MpCodigo)

muncol.gen<-filter(muncol.gen$CodeM!= "27086")
  
27086,94663,88001,88564,91263,91405,91407,91430,91460,91530,91536,91669,91798,94343,94883,94884,94885,94886,94887,94888,97511,97777,97889

temp <- poly2nb(muncol.gen)
nb2INLA("muncol.graph", temp)
muncol.adj <- paste(getwd(),"/muncol.graph",sep="")

H <- inla.read.graph(filename="muncol.graph")
image(inla.graph2matrix(H),xlab="",ylab="")

Casos_Covid_19_Combinado

formula <- IA_Acum ~ 1 + f(D_DEPTOR, model="bym",graph=muncol.adj, scale.model=TRUE,
                     hyper=list(prec.unstruct=list(prior="loggamma",param=c(1,0.001)),
                                prec.spatial=list(prior="loggamma",param=c(1,0.001))))

Nareas <- length(Casos_Covid_19_Combinado[,1])



