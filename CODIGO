------
title: "ANALISIS"
author: "Lorena Albarracin Avila"
date: "9/9/2022"
output: html_document
---


#Librerias usadas


```{r}
library(readxl)
library(table1)
library(mosaic)
library(DescTools)
library(ggplot2)
library (tidyverse)
library(readr)
library(dplyr)
library(lubridate)# fechas
library(reshape)
library(geoR)
library(knitr)
library(incidence)
library(binom)

library(s2)
library(tmap)
library(sf)
library(ggmap)
library(rgdal)
library(rgeos)
library(maptools)
library (corrplot)
library(carData)
library(car)

```


#Lectura bases de datos
```{r}

basecovid <- read_csv("data/basecovid.csv")
MUN_COL <- read_excel("data/MUN_COL.xlsx")
BASE_COV19_IPM <- read_csv("data/BASE_COV19_IPM.csv")
BASE_COV19_IPM <- BASE_COV19_IPM %>% select(CodeM, DEN_POB) %>% group_by(CodeM) %>% distinct()
BASE_COV19_IPM = rename(BASE_COV19_IPM, c(CodeM ="COD_MUN"))
#BASE_COV19_IPM = rename(BASE_COV19_IPM, c( COD_MUN ="CodeM"))

MUN_COL_PREV<-left_join(MUN_COL,BASE_COV19_IPM, by="COD_MUN") 

rm(MUN_COL)
rm (BASE_COV19_IPM)

```

# Limpieza base de datos CASOS  COVID

#Fechas 

```{r}
basecovid$`fecha reporte web`<- as.Date(basecovid$`fecha reporte web`,format="%Y/%m/%d")
basecovid$`Fecha de notificación`<- as.Date(basecovid$`Fecha de notificación`,format="%m/%Y")
basecovid$`Fecha de diagnóstico`<- as.Date(basecovid$`Fecha de diagnóstico`,format="%m/%Y")
basecovid$`Fecha de inicio de síntomas`<- as.Date(basecovid$`Fecha de inicio de síntomas`,format="%m/%Y")
basecovid$`Fecha de muerte`<- as.Date(basecovid$`Fecha de muerte`,format="%m/%Y")
basecovid$`Fecha de recuperación`<- as.Date(basecovid$`Fecha de recuperación`,format="%m/%Y")
basecovid$año <- as.numeric(format(basecovid$`Fecha de diagnóstico`,"%Y"))
basecovid$mes <- as.numeric(format(basecovid$`Fecha de diagnóstico`,"%m"))


```


seleccionar solo año 2020 y 2021, y municipios elegidos 

```{r}
basecovid<-basecovid   %>% 
     filter(año %in% c("2020","2021"))  

basecovid$ind <- ifelse(is.element(basecovid$`Código DIVIPOLA municipio`, c(27086,94663,88001,88564,91263,91405,91407,91430,91460,91530,91536,91669,91798,94343,94883,94884,94885,94886,94887,94888,97511,97777,97889)),0,1)

basecovidfinal<-basecovid %>% 
     filter(ind %in% c(1))
```

## prueba  estructura largo 

```{r}




basecovidfinallarge<- basecovidfinal %>% select(`Fecha de notificación`, `Código DIVIPOLA departamento` , `Nombre departamento`,  `Código DIVIPOLA municipio`, `Nombre municipio` , Recuperado , `Fecha de diagnóstico`, `Fecha de recuperación`, `Fecha de muerte`, año ,  mes , ind  )

basecovidfinallarge$añomuer <- as.numeric(format(basecovidfinallarge$`Fecha de muerte`,"%Y"))
basecovidfinallarge$mesmuer <- as.numeric(format(basecovidfinallarge$`Fecha de muerte`,"%m"))

basecovidfinallarge$añorec <- as.numeric(format(basecovidfinallarge$`Fecha de recuperación`,"%Y"))
basecovidfinallarge$mesrec <- as.numeric(format(basecovidfinallarge$`Fecha de recuperación`,"%m"))


basecovidfinallarge$ID_Periodo <- ifelse(basecovidfinallarge$año=="2020" & basecovidfinallarge$mes=="3", 1,
         ifelse(basecovidfinallarge$año=="2020" & basecovidfinallarge$mes=="4", 2,
         ifelse(basecovidfinallarge$año=="2020" & basecovidfinallarge$mes=="5", 3,
         ifelse(basecovidfinallarge$año=="2020" & basecovidfinallarge$mes=="6", 4,       
         ifelse(basecovidfinallarge$año=="2020" & basecovidfinallarge$mes=="7", 5,       
         ifelse(basecovidfinallarge$año=="2020" & basecovidfinallarge$mes=="8", 6,       
         ifelse(basecovidfinallarge$año=="2020" & basecovidfinallarge$mes=="9", 7,       
         ifelse(basecovidfinallarge$año=="2020" & basecovidfinallarge$mes=="10", 8,       
         ifelse(basecovidfinallarge$año=="2020" & basecovidfinallarge$mes=="11", 9,       
         ifelse(basecovidfinallarge$año=="2020" & basecovidfinallarge$mes=="12", 10,
         ifelse(basecovidfinallarge$año=="2021" & basecovidfinallarge$mes=="1", 11,
          ifelse(basecovidfinallarge$año=="2021" & basecovidfinallarge$mes=="2", 12,
          ifelse(basecovidfinallarge$año=="2021" & basecovidfinallarge$mes=="3", 13,      
          ifelse(basecovidfinallarge$año=="2021" & basecovidfinallarge$mes=="4", 14,      
          ifelse(basecovidfinallarge$año=="2021" & basecovidfinallarge$mes=="5", 15,
          ifelse(basecovidfinallarge$año=="2021" & basecovidfinallarge$mes=="6", 16,
                 ifelse(basecovidfinallarge$año=="2021" & basecovidfinallarge$mes=="7", 17,
                        ifelse(basecovidfinallarge$año=="2021" & basecovidfinallarge$mes=="8", 18,
                        ifelse(basecovidfinallarge$año=="2021" & basecovidfinallarge$mes=="9", 19,
                        ifelse(basecovidfinallarge$año=="2021" & basecovidfinallarge$mes=="10", 20,
                        ifelse(basecovidfinallarge$año=="2021" & basecovidfinallarge$mes=="11", 21,
                               ifelse(basecovidfinallarge$año=="2021" & basecovidfinallarge$mes=="12", 22,  ifelse(basecovidfinallarge$año==""|basecovidfinallarge$mes=="", NA, 23))))))))))))))))))))))) 
  


Casos_Acum2<- basecovidfinallarge %>% select(ID_Periodo,`Código DIVIPOLA municipio`,  `Nombre municipio` , ind ) %>% group_by(`Código DIVIPOLA municipio`, ID_Periodo) %>% summarise(casos = sum(ind))

Casos_Acum2<- mutate(Casos_Acum2, Casos_Acum = cumsum(casos))


##%>% group_by(CodeM) %>% distinct()


cond_finall <- basecovidfinallarge %>% select(ID_Periodo, `Código DIVIPOLA municipio`, Recuperado, ind ) %>% group_by(`Código DIVIPOLA municipio`, ID_Periodo)


cond_finall[cond_finall=="fallecido"] <- "Fallecido"

cond_finall$muerto <- (if_else(condition = cond_finall$Recuperado == "Fallecido", true = 1, false = 0))


cond_finall$recuperado <- (if_else(condition = cond_finall$Recuperado == "Recuperado", true = 1, false = 0))

Muertos<- cond_finall %>% group_by(`Código DIVIPOLA municipio`, ID_Periodo)%>% summarise(Muertos  = sum(muerto))

Muertos<- mutate(Muertos, Muertos_Acum= cumsum(Muertos))

Recuperados<- cond_finall %>% group_by(`Código DIVIPOLA municipio`, ID_Periodo)%>% summarise(Recuperados  = sum(recuperado))


Recuperados<- mutate(Recuperados, Recuperados_Acum = cumsum(Recuperados))



write.table(Casos_Covid_19_Combinado, "casosacum.xls")
write.table(Muertos, "Muertos.xls")
write.table(Recuperados, "Recuperados.xls")



```


```{r}
basecovidfinal$Sexo[basecovidfinal$Sexo =="f"] <- "F"
basecovidfinal$Sexo[basecovidfinal$Sexo =="m"] <- "M"

basecovidfinal$Edad_años <- round(if_else(condition = basecovidfinal$`Unidad de medida de edad` == 2,
                            true = basecovidfinal$Edad/12,
                            false = if_else(condition = basecovidfinal$`Unidad de medida de edad` == 3,
                                            true = basecovidfinal$Edad/365,
                                            false = basecovidfinal$Edad)),4)


table1(~ Sexo + Edad_años + `Tipo de contagio`   | año, data=basecovidfinal, overall="Total")



```

Codigos de municipios a excluir

```{r}

### Por ser areas no municipalizadas, San Andres, Providencia y Barrancominas. 
#excluidos<- c(27086,94663,88001,88564,91263,91405,91407,91430,91460,91530,91536,91669,91798,94343,94883,94884,94885,94886,94887,94888,97511,97777,97889)


```



#BASE DE DATOS DE MUNICIPIOS 


# Tablas de municipios 


```{r}
MUN_COL_PREV$Densidad_pob <- (if_else(condition = is.na(MUN_COL_PREV$DEN_POB) == TRUE , true = MUN_COL_PREV$POB_Total_2020/MUN_COL_PREV$`Superficie Km2`, false =MUN_COL_PREV$DEN_POB ))

```


#Distribucion de casos por Promedio de edad por municipio 

```{r}

Edad<- basecovidfinal %>% select(`Código DIVIPOLA municipio`,Edad_años ) %>% group_by(`Código DIVIPOLA municipio`)%>% summarise(Promedio_Edad_años = mean(Edad_años))

MUN_COL_PREV<-merge (MUN_COL_PREV,Edad, by.x="COD_MUN", by.y="Código DIVIPOLA municipio") 

```

#Distribucion de casos por sexo por municpio 
```{r}
Sexo <- basecovidfinal %>% select(`Código DIVIPOLA municipio`,Sexo ) %>% group_by(`Código DIVIPOLA municipio`)

Sexo$Femenino <- (if_else(condition = Sexo$Sexo== "F", true = 1, false = 0))


Sexo_mun<- Sexo %>% select(`Código DIVIPOLA municipio`, Femenino ) %>% group_by(`Código DIVIPOLA municipio`)%>% summarise(Proporcion_Mujeres  = mean(Femenino))

MUN_COL_PREV<-merge (MUN_COL_PREV,Sexo_mun, by.x="COD_MUN", by.y="Código DIVIPOLA municipio") 


```


#numero de casos por municipio

```{r}
casos_mun<-as.data.frame(table(basecovidfinal$`Código DIVIPOLA municipio`))
#casos_mun = rename(casos_mun, c(Total_casos= "Freq"))
casos_mun = rename(casos_mun, c(Freq= "Total_casos"))


MUN_COL_PREV<-merge(MUN_COL_PREV,casos_mun, by.x="COD_MUN", by.y="Var1")  

```


Tasas: incidencia, mortalidad, letalidad  por Municipio 

```{r}
cond_final <- basecovidfinal %>% select(`Código DIVIPOLA municipio`, Recuperado) %>% group_by(`Código DIVIPOLA municipio`)


cond_final[cond_final=="fallecido"] <- "Fallecido"

cond_final$muerto <- (if_else(condition = cond_final$Recuperado == "Fallecido", true = 1, false = 0))


cond_final$recuperado <- (if_else(condition = cond_final$Recuperado == "Recuperado", true = 1, false = 0))

cond_final_mun<- cond_final %>% group_by(`Código DIVIPOLA municipio`)%>% summarise(Num_muertos  = sum(muerto))


cond_final_den<- cond_final %>% group_by(`Código DIVIPOLA municipio`)%>% summarise(Num_recup  = sum(recuperado))

cond_final_den$total<-cond_final_mun$Num_muertos+cond_final_den$Num_recup
  
MUN_COL_PREV<-merge (MUN_COL_PREV,cond_final_mun, by.x="COD_MUN", by.y="Código DIVIPOLA municipio") 



##Densidad de  incidencia (NUM CASOS/ total poblacion  )

MUN_COL_PREV$Densidad_incidencia_x10.000<-round(MUN_COL_PREV$Total_casos/MUN_COL_PREV$POB_Total*10000, 2)  

##Tasa mortalidad (muertos/ total poblacion  )

MUN_COL_PREV$Tasa_mortalidad_x10.000<-round(MUN_COL_PREV$Num_muertos/  MUN_COL_PREV$POB_Total_2020*10000, 2) 

##Tasa Letalidad (muertos/ recuperados -muertos )

MUN_COL_PREV$Tasa_letalidad_x10.000<-round (MUN_COL_PREV$Num_muertos/cond_final_den$total*10000) 

```


#  primeros municipios con mayor tasa  de incidencia

```{r}
MUN_COL_PREV<-MUN_COL_PREV %>% arrange(desc(Densidad_incidencia_x10.000))
```



```{r}
library(dplyr)
datosmun<-basecovidfinal %>% group_by  (`Código DIVIPOLA municipio`, año) %>% count(mes)


datosmunprueba<-basecovidfinal %>% group_by(`Fecha de diagnóstico`,`Nombre municipio`, `Código DIVIPOLA municipio`)%>% count(`Nombre municipio`)


datosmun = rename(datosmun, c(COD_MUN="Código DIVIPOLA municipio"))
datosmun = rename(datosmun, c(`Código DIVIPOLA municipio`="COD_MUN"))
library(maditr)
casos_mes2<- dcast(datosmun, COD_MUN ~ año + mes, value.var = "n")


```



casos acumulados por tiempo

```{r}
Casos_acum<- basecovidfinal %>% select(`Fecha de diagnóstico`,`Código DIVIPOLA municipio`,  `Nombre municipio` , ind ) %>% group_by(`Código DIVIPOLA municipio`, `Fecha de diagnóstico`) %>% summarise(casos = sum(ind))

Casos_acum<- mutate(Casos_acum, freq.acumulative = cumsum(casos))

Casos_acum$casos_t<- mutate(Casos_acum, freq.acumulative = cumsum(casos))
```

```{r}
municipios=st_read ( "fuentes/mpio2/Munpio.shp")



municipios$COD_MUN<-as.numeric(municipios$MpCodigo)


municipios<-left_join(municipios, MUN_COL_PREV, by="COD_MUN")
```

##ANALISIS DESCRIPTIVO 

tasa de letalidad general 

```{r}
n_dead <- sum(MUN_COL_PREV$Num_muertos)
n_known_outcome <- sum(cond_final_den$total)
cfr <- n_dead / n_known_outcome *100

cfr_with_CI <- binom.confint(n_dead, n_known_outcome, method = "exact")


rm (cfr_with_CI)
rm(cond_final_den)
```

```{r}
plot(Casos_acum$`Fecha de diagnóstico`, Casos_acum$casos, type = "l",
     col = "lightblue", # Color
     lwd = 0.5, main = 'Casos Covid') 

plot(Casos_acum$`Fecha de diagnóstico`, Casos_acum$freq.acumulative, type = "l",
     col = "lightblue", # Color
     lwd = 0.5, main = 'Casos Covid')

```



# 1. base de demografia y poblacion 

%_poblacion_rural
%_poblacion_urbana
Densidad poblacional
POB_Total_2020	

 
```{r}
table1(~  `poblacion_ rural`+ poblacion_urbana + Densidad_pob  + POB_Total_2020  , data=MUN_COL_PREV, overall="Total")
```


```{r}
demog_pob<-MUN_COL_PREV %>%   select (  `poblacion_ rural`,poblacion_urbana, Densidad_pob, POB_Total_2020  )
corDp<-cor(demog_pob, method = c("kendall"), use = "na.or.complete")
corrplot(corDp, method = "color")
```

De acuerdo a la alta correlacion se dejara solo la poblacion rural 


%_poblacion_rural
```{r}

ggplot(data = municipios) +
  geom_sf(aes(fill = `poblacion_ rural`)) + 
  scale_fill_gradient(low = "blue", high = "green", na.value = "gray") 
```

%_poblacion_urbana
```{r}

ggplot(data = municipios) +
  geom_sf(aes(fill = poblacion_urbana)) + 
  scale_fill_gradient(low = "blue", high = "green", na.value = "gray") 
```







# 2. Climatica y geografica
Superficie Km2
Altitud media m,s,n,m	
Temperatura °C

```{r}
table1(~  `Temperatura °C` + `Altitud media m,s,n,m`, data=MUN_COL_PREV, overall="Total")
```


```{r}
Climgeo<-MUN_COL_PREV %>%   select ( `Temperatura °C` , `Altitud media m,s,n,m` , `Superficie Km2`  )
corCG<-cor(Climgeo, method = c("kendall"), use = "na.or.complete")
corrplot(corCG, method = "color")
```


Por la correlacion entre altitud  y temperatura se dejara la variable altitud dado que es mas estable.

Mapa altitud media 


```{r}
ggplot(data = municipios) +
  geom_sf()

ggplot(data = municipios) +
  geom_sf(aes(fill = `Altitud media m,s,n,m`)) + 
  scale_fill_gradient(low = "dark green", high = "blue", na.value = "dark gray")
```


Mapa temperatura 


```{r}

ggplot(data = municipios) +
  geom_sf(aes(fill = `Temperatura °C`)) + 
  scale_fill_gradient(low = "yellow", high = "red", na.value = "gray")
```



# 3. Pobreza
NBI_Area_Urbana
NBI_Area_rural
Población_condición_miseria
IPM
DIMENSIÓN CALIDAD DE VIDA

```{r}
table1(~   NBI_Area_rural+ NBI_Area_Urbana + Población_condición_miseria + IPM_MUN 
       + `DIMENSIÓN CALIDAD DE VIDA`  , data=MUN_COL_PREV, overall="Total")
```


```{r}
pobreza<-MUN_COL_PREV %>%   select ( NBI_Area_rural, NBI_Area_Urbana , Población_condición_miseria , IPM_MUN ,`DIMENSIÓN CALIDAD DE VIDA` )

corPob<-cor(pobreza, method = c("kendall"), use = "na.or.complete")
corrplot(corPob, method = "color")
```


NBI_Area_rural

```{r}

ggplot(data = municipios) +
  geom_sf(aes(fill = NBI_Area_rural)) + 
  scale_fill_gradient(low = "green", high = "red", na.value = "gray") 

```


NBI_Area_Urbana

```{r}

ggplot(data = municipios) +
  geom_sf(aes(fill = NBI_Area_Urbana)) + 
  scale_fill_gradient(low = "green", high = "red", na.value = "gray") 

```


IPM_2020

```{r}

ggplot(data = municipios) +
  geom_sf(aes(fill = IPM_MUN)) + 
  scale_fill_gradient(low = "green", high = "red", na.value = "gray") 

```


DIMENSIÓN CALIDAD DE VIDA

```{r}


ggplot(data = municipios) +
  geom_sf(aes(fill = `DIMENSIÓN CALIDAD DE VIDA` )) + 
  scale_fill_gradient(low = "blue", high = "green", na.value = "gray")

```

# 4. Desempeño fiscal-Importancia Económica Municipal
Indice_Desempeño_Fiscal
DIMENSIÓN INSTITUCIONAL
DIMENSION URBANA 



```{r}
table1(~  `Valor Agregado Municipal (VA)`+ `DIMENSIÓN ECONOMICA`+Indice_Desempeño_Fiscal+ `DIMENSIÓN INSTITUCIONAL` + `DIMENSION URBANA`  , data=MUN_COL_PREV, overall="Total")

```



```{r}
desempefis<-MUN_COL_PREV %>%   select (  Indice_Desempeño_Fiscal,`DIMENSIÓN INSTITUCIONAL` , `DIMENSION URBANA`, `Valor Agregado Municipal (VA)`,`DIMENSIÓN ECONOMICA`   )

cordfis<-cor(desempefis, method = c("kendall"), use = "na.or.complete")
 corrplot(cordfis, method = "color")
```


Mapa Indice_Desempeño_Fiscal

```{r}

ggplot(data = municipios) +
  geom_sf(aes(fill = Indice_Desempeño_Fiscal ))

```

DIMENSIÓN INSTITUCIONAL

```{r}
ggplot(data = municipios) +
  geom_sf(aes(fill = `DIMENSIÓN INSTITUCIONAL` )) + 
  scale_fill_gradient(low = "blue", high = "green", na.value = "gray")

```


DIMENSION URBANA 

```{r}


ggplot(data = municipios) +
  geom_sf(aes(fill = `DIMENSION URBANA` )) + 
  scale_fill_gradient(low = "blue", high = "green", na.value = "gray")

```



`Valor Agregado Municipal (VA)`

```{r}
ggplot(data = municipios) +
  geom_sf(aes(fill = `Valor Agregado Municipal (VA)` )) + 
  scale_fill_gradient(low = "blue", high = "green", na.value = "gray")

```


DIMENSIÓN ECONOMICA

```{r}
ggplot(data = municipios) +
  geom_sf(aes(fill = `DIMENSIÓN ECONOMICA` )) + 
  scale_fill_gradient(low = "blue", high = "green", na.value = "gray")

```

# 6.  Conflicto armado y seguridad ciudadana
Número acumulado de personas desplazadas expulsadas
Número acumulado de personas desplazadas recibidas
Número de personas desplazadas

```{r}
table1(~ personas_desplazadas_expulsadas + personas_desplazadas_recibidas + personas_desplazadas, data=MUN_COL_PREV, overall="Total")
```


```{r}
conflict<-MUN_COL_PREV %>%   select (  personas_desplazadas_expulsadas , personas_desplazadas_recibidas , personas_desplazadas )

corconf<-cor(conflict, method = c("kendall"), use = "na.or.complete")
 corrplot(corconf, method = "color")
```


Número acumulado de personas desplazadas expulsadas

```{r}
ggplot(data = municipios) +
  geom_sf(aes(fill = personas_desplazadas_expulsadas )) + 
  scale_fill_gradient(low = "blue", high = "green", na.value = "gray")

```

Número acumulado de personas_desplazadas_recibidas

```{r}
ggplot(data = municipios) +
  geom_sf(aes(fill = personas_desplazadas_recibidas )) + 
  scale_fill_gradient(low = "blue", high = "green", na.value = "gray")

```


Número acumulado personas_desplazadas

```{r}
ggplot(data = municipios) +
  geom_sf(aes(fill = personas_desplazadas )) + 
  scale_fill_gradient(low = "blue", high = "green", na.value = "gray")

```

#7. Salud
Prevalencia de HTA
Prevalencia de DM
Prevalencia de ERC
Tasa de mortalidad (x cada 1.000 habitantes)
Afiliados_SGSSS
densidad de incidencia de Covid
Tasa de letalidad de Covid
Tasa de mortalidad de Covid 
Promedio de edad casos covid
Proporcion de mujeres

```{r}
table1(~ PRE_HTA + PRE_DM + PRE_ERC + Tasa_mortalidadGEN + Afiliados_SGSSS + Densidad_incidencia_x10.000 + Tasa_letalidad_x10.000 + Tasa_mortalidad_x10.000, data=MUN_COL_PREV, overall="Total")
```


```{r}
salud<-MUN_COL_PREV %>%   select (  PRE_HTA , PRE_DM ,PRE_ERC , Tasa_mortalidadGEN , Afiliados_SGSSS )

corsal<-cor(salud, method = c("kendall"), use = "na.or.complete")
 corrplot(corsal, method = "color")
```


PREVALENCIA HTA 

```{r}

ggplot(data = municipios) +
  geom_sf(aes(fill = PRE_HTA)) + 
  scale_fill_gradient(low = "green", high = "red", na.value = "gray") 

```

PREVALENCIA DM

```{r}

ggplot(data = municipios) +
  geom_sf(aes(fill = PRE_DM)) + 
  scale_fill_gradient(low = "Orange", high = "Red", na.value = "gray") 

```

PREVALENCIA ERC

```{r}

ggplot(data = municipios) +
  geom_sf(aes(fill = PRE_ERC)) + 
  scale_fill_gradient(low = "Beige", high = "Red", na.value = "gray") 

```



Tasa_mortalidadGEN

```{r}

ggplot(data = municipios) +
  geom_sf(aes(fill = Tasa_mortalidadGEN)) + 
  scale_fill_gradient(low = "green", high = "red", na.value = "gray") 

```




Promedio de edad casos covid

```{r}

ggplot(data = municipios) +
  geom_sf(aes(fill = Promedio_Edad_años)) + 
  scale_fill_gradient(low = "green", high = "red", na.value = "gray") 

```

Proporcion de mujeres

```{r}

ggplot(data = municipios) +
  geom_sf(aes(fill = Proporcion_Mujeres)) + 
  scale_fill_gradient(low = "green", high = "red", na.value = "gray") 

```

Número muertos 

```{r}

ggplot(data = municipios) +
  geom_sf(aes(fill = Num_muertos)) + 
  scale_fill_gradient(low = "blue", high = "green", na.value = "gray") 

```
Densidad de incidencia

```{r}
ggplot(data = municipios) +
  geom_sf(aes(fill = Densidad_incidencia_x10.000)) + 
  scale_fill_gradient(low = "blue", high = "green", na.value = "gray") 

```

Tasa de mortalidad

```{r}
ggplot(data = municipios) +
  geom_sf(aes(fill = Tasa_mortalidad_x10.000)) + 
  scale_fill_gradient(low = "green", high = "red", na.value = "gray") 

```
Tasa de letalidad

```{r}
ggplot(data = municipios) +
  geom_sf(aes(fill = Tasa_letalidad_x10.000)) + 
  scale_fill_gradient(low = "green", high = "red", na.value = "gray90") 

```




#vivienda y acceso de servicios de salud

Cobertura_acueducto
Cobertura_alcantarillado
Penetracion_Internet
# Educación
Cobertura_bruta_educación_Total
```{r}
table1(~ Cobertura_acueducto + Cobertura_alcantarillado + Penetracion_Internet + Cobertura_bruta_educación , data=MUN_COL_PREV, overall="Total")
```

```{r}
vivienda<-MUN_COL_PREV %>%   select (  Cobertura_acueducto , Cobertura_alcantarillado , Penetracion_Internet, Cobertura_bruta_educación )

corviv<-cor(vivienda, method = c("kendall"), use = "na.or.complete")
 corrplot(corviv, method = "color")
```


mapa penetracion internet

```{r}
ggplot(data = municipios) +
  geom_sf(aes(fill = Penetracion_Internet ))

```

mapa Cobertura_alcantarillado

```{r}
ggplot(data = municipios) +
  geom_sf(aes(fill = Cobertura_alcantarillado ))

```



```{r}
ggplot(data = municipios) +
  geom_sf(aes(fill = Cobertura_bruta_educación ))

```



# movilidad

Aeropuerto_Nal	
Aeropuerto_Inal	
Número de destinos internacionales

```{r}
table1(~   Aeropuerto_Inal + Aeropuerto_Nal + `Número de destinos internacionales`, data=MUN_COL_PREV, overall="Total")
```


Mapa aeropuerto 


```{r}
ggplot(data = municipios) +
  geom_sf(aes(fill = `Número de destinos internacionales`), color= "black")
```

# DESCPRIPTIVO DE OBJETIVO 1 




```{r}
OBJ1<-MUN_COL_PREV %>% arrange(desc(Densidad_incidencia_x10.000))%>% slice(1:10)

summary(OBJ1$Total_casos)

table1( ~  `poblacion_ rural`+ poblacion_urbana + Densidad_pob  + POB_Total_2020 |MPIO  , data=OBJ1, overall="Total")


```







## Analisis de casos de COVID 19

casos por mes y municipio para el año 2020-2021



EXCLUIDOS

```{r}
Municipios_Excluidos_copia <- read_excel("fuentes/Municipios Excluidos - copia.xlsx")
municipios<-left_join(municipios,Municipios_Excluidos_copia, by="COD_MUN")


```


Mapa de Municipios excluidos

```{r}

ggplot(data = municipios) +
  geom_sf(aes(fill = EXCLUIDO))  

```

#supuesto de normalidad

```{r}

#supuesto de normalidad

shapiro.test(municipios$`Altitud media m,s,n,m`)
shapiro.test(municipios$`Temperatura °C`)
shapiro.test(municipios$`Valor Agregado Municipal (VA)`)
shapiro.test(municipios$IPM_MUN)
shapiro.test(municipios$PRE_HTA)
shapiro.test(municipios$PRE_DM)
shapiro.test(municipios$PRE_ERC)

shapiro.test(municipios$Densidad_pob)
shapiro.test(municipios$Promedio_Edad_años)
shapiro.test(municipios$Densidad_incidencia_x10.000)
shapiro.test(municipios$Tasa_mortalidad_x10.000 )
shapiro.test(municipios$Tasa_letalidad_x10.000 )

```

#Correlacion 

```{r}
#mtcars %>% cor(method="pearson") %>% round(digits=2) -> cortod
#mat_cor
```


```{r}
#cortod <-MUN_COL_PREV %>%  select ( `Altitud media m,s,n,m`,`Temperatura °C` ,  `Valor Agregado Municipal (VA)` , Penetracion_Internet , Indice_Desempeño_Fiscal ,`DIMENSION URBANA`  ,`DIMENSIÓN ECONOMICA` , `DIMENSIÓN CALIDAD DE VIDA` ,  `DIMENSIÓN INSTITUCIONAL` , IPM_MUN , NBI_Area_Urbana , NBI_Area_rural, Población_condición_miseria , Afiliados_SGSSS , `poblacion_ rural` , poblacion_urbana , Cobertura_acueducto  , Cobertura_alcantarillado , Cobertura_bruta_educación ,  Tasa_mortalidadGEN , personas_desplazadas_expulsadas , personas_desplazadas_recibidas ,personas_desplazadas , PRE_HTA , PRE_DM , PRE_ERC , Densidad_pob)


MUN_COL_PREV$diciembre_porc_vac


cortod <-MUN_COL_PREV %>%  select ( `Altitud media m,s,n,m`,   Penetracion_Internet , Indice_Desempeño_Fiscal ,   `DIMENSIÓN INSTITUCIONAL` , IPM_MUN , Afiliados_SGSSS , poblacion_urbana , Cobertura_bruta_educación ,  Tasa_mortalidadGEN , personas_desplazadas_expulsadas ,   PRE_DM , PRE_ERC , Densidad_pob, marzo_porc_vac, diciembre_porc_vac )


corvar<- cor(cortod, method = c("spearman"), use = "na.or.complete")%>% round(digits=1)

```


```{r}
glm1<-lm(Densidad_incidencia_x10.000~ `Altitud media m,s,n,m` + `Temperatura °C` ,data=MUN_COL_PREV)
options(scipen = 9990) 
vif(glm1)
```

correlacion de altitud y temperatura: -0.9 dado que la altitud es mas estable se excluye temperatura 

dimension economica y valor agregado municipal 0.9. , dado que la dimension economica tiene informacion de 2014 se excluye, se deja la informacion de valor agregado 

Afiliados_SGSSS y valor agregado municipal  0.7, teniendo en cuenta la relacion con salud se excluye el valor agregado municipal

Afiliados_SGSSS Y  Número acumulado de personas desplazadas recibidas 0,8,  teniendo en cuenta la relacion con salud se excluye  Número acumulado de personas desplazadas recibidas fuente 2017.

se excluye DIMENSION URBANA: poblacion_ rural -0.8   poblacion_urbana 0.8, la informacion de dimension urbana es del 2014, por tanto se deja poblacion 


IPM y dimension calidad de vida -0.9 ; dimension calidad de vida y Población_condición_miseria 0.6; se excluye  dimension calidad de vida fuente 2014.



IPM: NBI_Area_Urbana 0,7; NBI_Area_rural 0,8; Población_condición_miseria 0,8. 


IPM Cobertura_acueducto - Cobertura_alcantarillado -0.7 


Número de personas desplazadas y Número acumulado de personas desplazadas expulsadas 0.8 se excluye desplazadas por que tiene 365 municipios con cero 0

Prevalencia de hipertension y diabetes 0.8 , se escluye HTA 




BASE COMPLETA DE MUNICIPIOS- (informacion mapas, informacion de variables, informacion casos por mes)


```{r}
municipios<-left_join(municipios,casos_mes2, by="COD_MUN")


municipios <- municipios %>%  filter(COD_DEPT!= "88")


```


#modelos



# MODELO LINEAL GENERALIZADO 


```{r}

mod1<- glm(Densidad_incidencia_x10.000 ~   Aeropuerto_Nal +`Altitud media m,s,n,m`+   Penetracion_Internet + Indice_Desempeño_Fiscal +  `DIMENSIÓN INSTITUCIONAL` + IPM_MUN + Afiliados_SGSSS + poblacion_urbana + Cobertura_bruta_educación + Tasa_mortalidadGEN + personas_desplazadas_expulsadas +   PRE_DM + PRE_ERC + Densidad_pob+ I(Densidad_pob^2) , data = MUN_COL_PREV)

summary(mod1)


mod2s<- glm(Densidad_incidencia_x10.000 ~   Aeropuerto_Nal +`Altitud media m,s,n,m`+   Penetracion_Internet + Indice_Desempeño_Fiscal +  IPM_MUN + Afiliados_SGSSS + poblacion_urbana + Cobertura_bruta_educación + Tasa_mortalidadGEN + personas_desplazadas_expulsadas +  PRE_ERC + Densidad_pob+ I(Densidad_pob^2) , data = MUN_COL_PREV)

summary(mod2s)

anova(mod1,mod2s)




mod2depurado<- glm(  Total_casos~ Aeropuerto_Nal +`Altitud media m,s,n,m`+   Penetracion_Internet + Indice_Desempeño_Fiscal +  `DIMENSIÓN INSTITUCIONAL` + IPM_MUN + Afiliados_SGSSS + poblacion_urbana + Cobertura_bruta_educación + Tasa_mortalidadGEN + personas_desplazadas_expulsadas +   PRE_DM + PRE_ERC + Densidad_pob   +  I (Densidad_pob ^ 2) + offset(log(POB_Total_2020)), family=poisson, data = MUN_COL_PREV)

summary(mod2depurado)

 
```






#REVISION DESCRIPTIVA DE VARIABLES PARA INCLUIR EN EL MODELO 

Aeropuerto_Nal +`Altitud media m,s,n,m`+   Penetracion_Internet + Indice_Desempeño_Fiscal +  IPM_MUN + Afiliados_SGSSS + poblacion_urbana + Cobertura_bruta_educación + Tasa_mortalidadGEN + personas_desplazadas_expulsadas +  PRE_ERC + Densidad_pob+


`Altitud media m,s,n,m` 




```{r}
plot(MUN_COL_PREV$`Altitud media m,s,n,m`, MUN_COL_PREV$Densidad_incidencia_x10.000)

xalm=unique(quantile(MUN_COL_PREV$`Altitud media m,s,n,m`,0:10/10))


MUN_COL_PREV$CATALT<-   cut(x = MUN_COL_PREV$`Altitud media m,s,n,m`, breaks = xalm, labels = xalm[-1])

plot(MUN_COL_PREV$CATALT, MUN_COL_PREV$Densidad_incidencia_x10.000)

```


    
    

** Penetracion_Internet:  Proporción hogares con acceso a internet en el municipio	Porcentaje

```{r}
x=unique(quantile(MUN_COL_PREV$Penetracion_Internet,0:10/10))

MUN_COL_PREV$CATPINT<-   cut(x = MUN_COL_PREV$Penetracion_Internet, breaks = x,labels = x[-1])

plot(MUN_COL_PREV$CATPINT, MUN_COL_PREV$Densidad_incidencia_x10.000)

```


```{r}


table1(~ Densidad_incidencia_x10.000| CATPINT,data = MUN_COL_PREV, 
       rowlabelhead = "Variables",
       caption = "promedio penetracion de internet",
       footnote = "Fuente: ''",
       overall = "General"       )


            

```





** IPM_MUN Incidencia de la pobreza según índice de la pobreza multidimensional

```{r}

xipm=unique(quantile(MUN_COL_PREV$IPM_MUN,0:10/10))

MUN_COL_PREV$CATIPM_MUN<-   cut(x = MUN_COL_PREV$IPM_MUN, breaks = xipm,labels = xipm[-1])

table1(~ Densidad_incidencia_x10.000| CATIPM_MUN,data = MUN_COL_PREV, 
       rowlabelhead = "Variables",
       caption = "IPM_MUN ",
       footnote = "Fuente: ''",
       overall = "General"       )

                             

plot(MUN_COL_PREV$CATIPM_MUN, MUN_COL_PREV$Densidad_incidencia_x10.000)
```



**Cobertura_bruta_educación Porcentaje (el valor está multiplicado por 100)


```{r}

xcbe=unique(quantile(MUN_COL_PREV$Cobertura_bruta_educación,0:10/10))

MUN_COL_PREV$CATCBE<-   cut(x = MUN_COL_PREV$Cobertura_bruta_educación, breaks = xcbe,labels = xcbe[-1])

table1(~ Densidad_incidencia_x10.000| CATCBE,data = MUN_COL_PREV, 
       rowlabelhead = "Variables",
       caption = "Cobertura_bruta_educación Porcentaje",
       footnote = "Fuente: ''",
       overall = "General"       )
plot(MUN_COL_PREV$CATCBE, MUN_COL_PREV$Densidad_incidencia_x10.000)

```

 personas_desplazadas_expulsadas Personas


```{r}
xpde=unique(quantile(MUN_COL_PREV$personas_desplazadas_expulsadas,0:10/10))

MUN_COL_PREV$CATPDE<-   cut(x = MUN_COL_PREV$personas_desplazadas_expulsadas, breaks = xpde,labels = xpde[-1])

table1(~ Densidad_incidencia_x10.000| CATPDE,data = MUN_COL_PREV, 
       rowlabelhead = "Variables",
       caption = "personas_desplazadas_expulsadas Personas",
       footnote = "Fuente: ''",
       overall = "General"       )

                         

plot(MUN_COL_PREV$CATPDE, MUN_COL_PREV$Densidad_incidencia_x10.000)

```



PRE_ERC

```{r}
xpreerc=unique(quantile(MUN_COL_PREV$PRE_ERC,0:10/10))

MUN_COL_PREV$CATPREERC<-   cut(x = MUN_COL_PREV$PRE_ERC, breaks = xpreerc,labels = xpreerc[-1])

table1(~ Densidad_incidencia_x10.000| CATPREERC,data = MUN_COL_PREV, 
       rowlabelhead = "Variables",
       caption = "PRE_ERC",
       footnote = "Fuente: ''",
       overall = "General"       )

plot(MUN_COL_PREV$CATPREERC, MUN_COL_PREV$Densidad_incidencia_x10.000)

```


Densidad_pob 

```{r}
xdenpob=unique(quantile(MUN_COL_PREV$Densidad_pob,0:10/10))

MUN_COL_PREV$CATDENPOB<-   cut(x = MUN_COL_PREV$Densidad_pob, breaks = xdenpob,labels = xdenpob[-1])

table1(~ Densidad_incidencia_x10.000| CATDENPOB,data = MUN_COL_PREV, 
       rowlabelhead = "Variables",
       caption = "DENSIDAD POB",
       footnote = "Fuente: ''",
       overall = "General"       )


plot(MUN_COL_PREV$CATDENPOB, MUN_COL_PREV$Densidad_incidencia_x10.000)

plot(MUN_COL_PREV$Densidad_pob, MUN_COL_PREV$Densidad_incidencia_x10.000)

plot(MUN_COL_PREV$CATDENPOB, MUN_COL_PREV$Total_casos)


```



 Afiliados_SGSSS
 
    
```{r}

xaf=unique(quantile(MUN_COL_PREV$Afiliados_SGSSS,0:10/10))

MUN_COL_PREV$CATAFI<-   cut(x = MUN_COL_PREV$Afiliados_SGSSS, breaks = xaf,labels = xaf[-1])

plot(MUN_COL_PREV$CATAFI, MUN_COL_PREV$Densidad_incidencia_x10.000)

```
    
`DIMENSIÓN INSTITUCIONAL`
    
       
```{r}

plot(MUN_COL_PREV$`DIMENSIÓN INSTITUCIONAL`, MUN_COL_PREV$Densidad_incidencia_x10.000)

xdimi=unique(quantile(MUN_COL_PREV$`DIMENSIÓN INSTITUCIONAL`,0:10/10))

MUN_COL_PREV$CATDIMINS<-   cut(x = MUN_COL_PREV$`DIMENSIÓN INSTITUCIONAL`, breaks = xdimi,labels = xdimi[-1])

plot(MUN_COL_PREV$CATDIMINS, MUN_COL_PREV$Densidad_incidencia_x10.000)

``` 
   
   
    
    
Cobertura_acueducto  
    
    
```{r}

plot(MUN_COL_PREV$Cobertura_acueducto , MUN_COL_PREV$Densidad_incidencia_x10.000)

xcoac=unique(quantile(MUN_COL_PREV$Cobertura_acueducto,0:10/10))

MUN_COL_PREV$CATCOBERTUR<-   cut(x = MUN_COL_PREV$Cobertura_acueducto, breaks = xcoac,labels = xcoac[-1])

plot(MUN_COL_PREV$CATCOBERTUR, MUN_COL_PREV$Densidad_incidencia_x10.000)

```




Tasa_mortalidadGEN 
    
    
```{r}

plot(MUN_COL_PREV$Tasa_mortalidadGEN , MUN_COL_PREV$Densidad_incidencia_x10.000)

xTM=unique(quantile(MUN_COL_PREV$Tasa_mortalidadGEN,0:10/10))


MUN_COL_PREV$CATTASMOR<-   cut(x = MUN_COL_PREV$Tasa_mortalidadGEN, breaks = xTM,labels = xTM[-1])

plot(MUN_COL_PREV$CATTASMOR, MUN_COL_PREV$Densidad_incidencia_x10.000)

```
  
  
  
  
  
  
  #CORRELACION ESPACIAL

```{r}
library(maptools) 
gpclibPermit()

## (clases) para la representación de datos espaciales en el R
require(sp)  
## funciones de análisis de datos de área
require(spdep)

## funciones para facilitar la división de datos en clases por varios criterios

require(classInt) 
require(sf) 

## funciones utilizadas para crear paletas de colores en visualización de mapas

require(RColorBrewer)
par.ori <- par(no.readonly=TRUE)


```

```{r}

coords <- coordinates(as((municipios), 'Spatial'))
rook_Col <- poly2nb(as(municipios, 'Spatial'), queen = FALSE)
```

```{r}
nb_to_df <- function(nb, coords){
  x <- coords[, 1]
  y <- coords[, 2]
  n <- length(nb)

  cardnb <- card(nb)
  i <- rep(1:n, cardnb)
  j <- unlist(nb)
  return(data.frame(x = x[i], xend = x[j],
                    y = y[i], yend = y[j]))
}
```

Torre

```{r}

rook_rook_Col_df <- nb_to_df(rook_Col, coords)
```


# estructura TORRE 

```{r}
ggplot(municipios) +
  geom_sf()+
  geom_point(data = rook_rook_Col_df,
             mapping = aes(x = x, y = y))+
  geom_segment(data = rook_rook_Col_df,
               mapping = aes(x = x, xend = xend, y = y, yend = yend))+
  labs(x = "",y = "")
```

Criterio Queen (de la Reina)

```{r}
queen_Col <- poly2nb(as(municipios, 'Spatial'), queen = T)

queen_Col_df <- nb_to_df(queen_Col, coords)
```

```{r}
ggplot(municipios) +
  geom_sf()+
  geom_point(data = queen_Col_df,
             mapping = aes(x = x, y = y))+
  geom_segment(data = queen_Col_df,
               mapping = aes(x = x, xend = xend, y = y, yend = yend))+
  labs(x = "", y = "")
```

```{r}
kn_COL <- knn2nb(knearneigh(coords, k = 6))
kn_COL_df <- nb_to_df(kn_COL,coords)

ggplot(municipios) +
  geom_sf()+
  geom_point(data = kn_COL_df, mapping = aes(x = x, y = y))+
  geom_segment(data = kn_COL_df,
               mapping = aes(x = x, xend = xend, y = y, yend = yend))+
  labs(x = "", y = "")


```


INDICE DE MORAN ESTRUCTURA REINA 


```{r}
queen_col_lw <- nb2listw(queen_Col, zero.policy = TRUE)
#global

moran.test(municipios$Densidad_incidencia_x10.000, listw = queen_col_lw, zero.policy = TRUE , alternative = "two.side")






```

INDICE DE MORAN ESTRUCTURA TORRE 

```{r}
rook_col_lw <- nb2listw(rook_Col, zero.policy = TRUE)

moran.test(municipios$Densidad_incidencia_x10.000, listw = rook_col_lw, zero.policy = TRUE)

```

```{r}
geary.test(municipios$Densidad_incidencia_x10.000, listw = queen_col_lw, zero.policy = TRUE , alternative = "two.side")
```


como hacer un cuadro de mapas. ??????

```{r}
ggplot(data = municipios) +
  geom_sf(aes(fill = `2020_4`)) + 
  scale_fill_gradient(low = "blue", high = "green", na.value = "gray90") +
  labs(title = "Número de casos  de Covid en los Municipios de Colombia ", 
           caption = "Datos: ", y = NULL, x = NULL)
```




```{r}
(cond_final)
rm(Edad)
rm(cond_final_mun)
rm(basecovid)
rm(casos_mun)
rm(Sexo)
rm(Sexo_mun)
rm(datosmun)
rm(casos_mes2)
rm(Municipios_Excluidos_copia)

```



## INTERACCION ESPACIO TEMPORAL 

```{r}
library(spdep)
library(rgdal)
library(readxl)
library(RColorBrewer)
library(classInt)
library(maptools)
library(tidyverse)
library(lubridate)
library(pgirmess)
library(quantmod)
library(ggplot2)
library(astsa)
library(shiny)
library(readr)
library(leaflet)
library(ggplot2)
library(dplyr)
library(INLA)
require(splancs)
require(sp)
require(fields)
require(lattice)
require(abind)



```


```{r}
# Leer datos

library(maptools)

col.gen <-  readShapePoly("fuentes/mpio2/Munpio.shp")
temp <- poly2nb(col.gen)
nb2INLA("col.graph", temp)
col.adj <- paste(getwd(),"/col.graph",sep="")

library(inla.read.graph)

H <- inla.read.graph(filename="col.graph")
image(inla.graph2matrix(H),xlab="",ylab="")


##debo especificar a y??

formula <- Densidad_incidencia_x10.000 ~ 1 + f(ID, model="bym",graph=col.adj)

mod.suicides <- inla(formula,family="poisson",
data=MUN_COL_PREV,E=E,
control.compute=list(dic=TRUE))


mod.intI_P_C <- inla(formula.intI_C,family="poisson",data=Casos_Covid_19_Combinado,
                     E=Casos_Covid_19_Combinado$Pob, control.predictor = list(link=Link),
                     control.compute=list(dic=TRUE,cpo=TRUE,waic=TRUE))

```





#Replica 

require(INLA)
inla.setOption(scale.model.default=FALSE)
library(readxl)
require(gstat)
require(geoR)
require(fields)
require(maptools)
require(lattice)
require(spdep)
library(dplyr)

Casos_Covid_19_Combinado <- read_excel("D:/MAESTRIA BIOESTADISITICA/TESIS/BASE DE DATOS/TESIS/data/Casos_Covid_19_Combinado.xlsx")

municipios=st_read ( "D:/MAESTRIA BIOESTADISITICA/TESIS/BASE DE DATOS/TESIS/fuentes/mpio2/Munpio.shp")



municipios$CodeM<-as.character(municipios$MpCodigo)





muncol.gen <- readShapePoly("D:/MAESTRIA BIOESTADISITICA/TESIS/BASE DE DATOS/TESIS/fuentes/mpio2/Munpio.shp")
# colombia 1.100


muncol.gen$CodeM<-as.numeric (muncol.gen$MpCodigo)

muncol.gen<-filter(muncol.gen$CodeM!= "27086")
  
27086,94663,88001,88564,91263,91405,91407,91430,91460,91530,91536,91669,91798,94343,94883,94884,94885,94886,94887,94888,97511,97777,97889

temp <- poly2nb(muncol.gen)
nb2INLA("muncol.graph", temp)
muncol.adj <- paste(getwd(),"/muncol.graph",sep="")

H <- inla.read.graph(filename="muncol.graph")
image(inla.graph2matrix(H),xlab="",ylab="")

Casos_Covid_19_Combinado

formula <- IA_Acum ~ 1 + f(D_DEPTOR, model="bym",graph=muncol.adj, scale.model=TRUE,
                     hyper=list(prec.unstruct=list(prior="loggamma",param=c(1,0.001)),
                                prec.spatial=list(prior="loggamma",param=c(1,0.001))))

Nareas <- length(Casos_Covid_19_Combinado[,1])




library(spdep)
library(rgdal)
library(readxl)
library(RColorBrewer)
library(classInt)
library(maptools)
library(dplyr)
library(lubridate)
library(pgirmess)
library(quantmod)
library(ggplot2)
library(astsa)
library(maptools) 
require(sp)  
require(spdep)
require(classInt) 
require(sf) 
require(RColorBrewer)
library (corrplot)
library(car)
library(table1)
library(gridExtra)
library(GWmodel)
library(leaflet)
library(tseries)
library(astsa)
library(fpp2)
library(TSA)
library(sjPlot)
library(sjmisc)
library(sjlabelled)
library(jtools)      
library(tidyverse)
library(maditr)
#par.ori <- par(no.readonly=TRUE)



### DATOS

# Base original
data <- read_excel("D:/MAESTRIA BIOESTADISITICA/TESIS/BASE DE DATOS/TESIS/data/data.xlsx")
data1 <- read_excel("D:/MAESTRIA BIOESTADISITICA/TESIS/BASE DE DATOS/TESIS/fuentes/POB_2020POSTCOVID.xlsx")
data<-left_join(data,data1, by="Cod_DIVIPOLAtxt") 
data$n<- data$Pob
data$densidad_pob<- (data$Pob/data$Superficie_Km2)
data$cob_vacunacion_pob2021 <- (data$Vacunas_Acum_POB2022/data$Pob_2021)*100
data$tasaletalidad<- (data$Muertos_Acum/data$Casos_Acum)*100
data$Tasamort_Acum <- (data$Muertos_Acum/data$Pob_2021)*100
data$Tasamort_mes <- (data$Muertos/data$Casos)*100
data$Aeropuerto_Nal<- as.character  (data$Aeropuerto_Nal)
data$Aeropuerto_Nal.1<- as.numeric (data$Aeropuerto_Nal)
data$Categoria_Ruralidadcat <-data$Categoria_Ruralidad
data$Categoria_Ruralidadcat[data$Categoria_Ruralidadcat=="Ciudades y aglomeraciones"] <- 1
data$Categoria_Ruralidadcat[data$Categoria_Ruralidadcat=="Intermedio"] <- 2
data$Categoria_Ruralidadcat[data$Categoria_Ruralidadcat=="Rural"] <- 3
data$Categoria_Ruralidadcat[data$Categoria_Ruralidadcat=="Rural disperso"] <- 4
data$Categoria_Ruralidadcat<- as.numeric(data$Categoria_Ruralidadcat)
  
remove(data1)

# Base reescalando  Altitud_media" , "Superficie_Km2

data1<- scale(data[,c( "Altitud_media" , "Superficie_Km2")], center = TRUE, scale = TRUE)
data<- data.frame(data, data1)
remove(data1)

# Calculo de incidencia por mes y  acumulada por mil habitantes

data$IA_mes<- (data$Casos/data$Pob)*1000
data$IA_Acum <- (data$Casos_Acum/data$Pob)*1000

# correlacion 15 covariables despues de excluir 14 covariables por correlacion > (0,7) - (0,7) [codigo en R ANALISIS-linea 904]

Covariables <- filter(data,year==22)
Covariables $Aeropuerto_Nal<- as.numeric (Covariables $Aeropuerto_Nal)
Covariablesnum<- Covariables %>% select(  Altitud_media , DIM_INSTITUCIONAL , IPM_MUN , 
                                          poblacion_urbana,Tasa_mortalidadGEN ,
                                          PRE_DM , PRE_ERC , cob_vacunacion_pob2021, Superficie_Km2 ,
                                          Indice_Desempeño_Fiscal,  Aeropuerto_Nal, Categoria_Ruralidadcat,
                                          Cobertura_bruta_educación, Afiliados_SGSSS, Penetracion_Internet)

corvar<- cor(Covariablesnum, method = c("spearman"), use = "na.or.complete")%>% round(digits=1)
corrplot(corvar)
remove(Covariables)
remove(Covariablesnum)

# casos calculo  colinealidad 

mod2depurado<- glm(  Casos~ Altitud_media.1+  DIM_INSTITUCIONAL+
                      IPM_MUN +  poblacion_urbana + Tasa_mortalidadGEN+  PRE_DM + PRE_ERC +
                       cob_vacunacion_pob2021  + Superficie_Km2.1 +  Rango_IDF +
                       factor(Aeropuerto_Nal) + Categoria_Ruralidad + 
                       Afiliados_SGSSS + Penetracion_Internet + Cobertura_bruta_educación,  offset = log(n), 
                        family = poisson(link = "log"), data = data)

#significancia 
summary(mod2depurado)
#colinealidad
vif(mod2depurado)

# modelo 2 eliminando  [Afiliados_SGSSS + Penetracion_Internet + Cobertura_bruta_educación] IPM VIF 8.28

mod2depurado1<- glm(  Casos~ Altitud_media.1+  DIM_INSTITUCIONAL+
                       IPM_MUN +  poblacion_urbana + Tasa_mortalidadGEN+  PRE_DM + PRE_ERC +
                       cob_vacunacion_pob2021  + Superficie_Km2.1 +  Rango_IDF +
                        factor(Aeropuerto_Nal) +Categoria_Ruralidad  + tasaletalidad + Tasamort_Acum,  offset = log(n), 
                        family = poisson(link = "log"), data = data)


#significancia 
summary(mod2depurado1)
#colinealidad
vif(mod2depurado1)
 
remove(corvar)
remove(mod2depurado)
remove(mod2depurado1)


 #Analisis univariado

#Medidas de tendencia central y dispersion  

diciembre_2021<- filter(data, year==22)

table1(~  IA_Acum + Altitud_media + DIM_INSTITUCIONAL + IPM_MUN + poblacion_urbana+
         + Tasa_mortalidadGEN + PRE_DM + PRE_ERC + cob_vacunacion_pob2021 +
          + Superficie_Km2 + Rango_IDF+factor (Aeropuerto_Nal)+ Categoria_Ruralidad ,data=diciembre_2021, 
       overall="Total",  
       render.continuous=c(.="Mean (SD)", .="Median [Q1, Q3]", .="IQR", .="CV%"))


# diez primeros municipios por cada variable (Ajustar)
diciembre_2021$mun<- paste(diciembre_2021$Nombre_municipio, diciembre_2021$DTO, sep = ", ") 
poblacion_urbana<-diciembre_2021%>% arrange(desc(IA_Acum))%>% slice(1:10)
poblacion_urbana$mun


#bivariado


ggplot(diciembre_2021, aes(x = poblacion_urbana, y = IA_Acum)) +
  geom_point(color = "black", size = 1.0) +
  geom_smooth(method = "lm") +
  labs(x = "Porcentaje de población urbana", y = "Incidencia acumulada")


ggplot(diciembre_2021, aes(x = Altitud_media, y = IA_Acum)) +
  geom_point(color = "black", size = 1.0) +
  geom_smooth(method = "lm") +
  labs(x = "Altitud Media", y = "Incidencia acumulada")

ggplot(diciembre_2021, aes(x = IPM_MUN, y = IA_Acum)) +
  geom_point(color = "black", size = 1.0) +
  geom_smooth(method = "lm") +
  labs(x = "Indice de pobreza Multidimensional", y = "Incidencia acumulada")


ggplot(diciembre_2021, aes(x = DIM_INSTITUCIONAL , y = IA_Acum)) +
  geom_point(color = "black", size = 1.0) +
  geom_smooth(method = "lm") +
  labs(x = "Dimension Institucional ", y = "Incidencia acumulada")

ggplot(diciembre_2021, aes(x = Tasa_mortalidadGEN, y = IA_Acum)) +
  geom_point(color = "black", size = 1.0) +
  geom_smooth(method = "lm") +
  labs(x = "Tasa de mortalidad general", y = "Incidencia acumulada")

ggplot(diciembre_2021, aes(x = PRE_DM , y = IA_Acum)) +
  geom_point(color = "black", size = 1.0) +
  geom_smooth(method = "lm") +
  labs(x = "Prevalencia de Diabetes", y = "Incidencia acumulada")

ggplot(diciembre_2021, aes(x = PRE_ERC, y = IA_Acum)) +
  geom_point(color = "black", size = 1.0) +
  geom_smooth(method = "lm") +
  labs(x = "Prevalencia de enfermedad renal cronica", y = "Incidencia acumulada")

ggplot(diciembre_2021, aes(x = Cobertura_bruta_educación, y = IA_Acum)) +
  geom_point(color = "black", size = 1.0) +
  geom_smooth(method = "lm") +
  labs(x = "Cobertura bruta de educación", y = "Incidencia acumulada")



ggplot(diciembre_2021, aes(x = cob_vacunacion_pob2021 , y = IA_Acum)) +
  geom_point(color = "black", size = 1.0) +
  geom_smooth(method = "lm") +
  labs(x = "cobertura de vacunacion COVID19 pob. 2021", y = "Incidencia acumulada")


ggplot(diciembre_2021, aes(x =Aeropuerto_Nal , y = IA_Acum)) +
  geom_point(color = "black", size = 1.0) +
  geom_smooth(method = "lm") +
  labs(x = "Aeropuerto Nacional", y = "Incidencia acumulada")

ggplot(diciembre_2021, aes(x = Rango_IDF, y = IA_Acum)) +
  geom_point(color = "black", size = 1.0) +
  geom_smooth(method = "lm") +
  labs(x = "Rango de indice desempeño fiscal", y = "Incidencia acumulada")




# por categorias 

xalm=unique(quantile(diciembre_2021$poblacion_urbana,0:10/10))
diciembre_2021$poblacion_urbana.cat<-   cut(x = diciembre_2021$poblacion_urbana, breaks = xalm, labels = xalm[-1])
plot(diciembre_2021$poblacion_urbana.cat, diciembre_2021$IA_Acum) 


xalm=unique(quantile(diciembre_2021$Altitud_media,0:10/10))
diciembre_2021$Altitud_media.cat<-   cut(x = diciembre_2021$Altitud_media, breaks = xalm, labels = xalm[-1])
plot(diciembre_2021$Altitud_media.cat, diciembre_2021$IA_Acum)

xalm=unique(quantile(diciembre_2021$IPM_MUN,0:10/10))
diciembre_2021$IPM_MUN.cat<-   cut(x = diciembre_2021$IPM_MUN, breaks = xalm, labels = xalm[-1])
plot(diciembre_2021$IPM_MUN.cat, diciembre_2021$IA_Acum)


xalm=unique(quantile(diciembre_2021$DIM_INSTITUCIONAL,0:10/10))
diciembre_2021$DIM_INSTITUCIONAL.cat<-   cut(x = diciembre_2021$DIM_INSTITUCIONAL, breaks = xalm, labels = xalm[-1])
plot(diciembre_2021$DIM_INSTITUCIONAL.cat, diciembre_2021$IA_Acum)

xalm=unique(quantile(diciembre_2021$Tasa_mortalidadGEN,0:10/10))
diciembre_2021$Tasa_mortalidadGEN.cat<-   cut(x = diciembre_2021$Tasa_mortalidadGEN, breaks = xalm, labels = xalm[-1])
plot(diciembre_2021$Tasa_mortalidadGEN.cat, diciembre_2021$IA_Acum)

xalm=unique(quantile(diciembre_2021$PRE_DM,0:10/10))
diciembre_2021$PRE_DM.cat<-   cut(x = diciembre_2021$PRE_DM, breaks = xalm, labels = xalm[-1])
plot(diciembre_2021$PRE_DM.cat, diciembre_2021$IA_Acum)

xalm=unique(quantile(diciembre_2021$PRE_ERC,0:10/10))
diciembre_2021$PRE_ERC.cat<-   cut(x = diciembre_2021$PRE_ERC, breaks = xalm, labels = xalm[-1])
plot(diciembre_2021$PRE_ERC.cat, diciembre_2021$IA_Acum)

xalm=unique(quantile(diciembre_2021$Cobertura_bruta_educación,0:10/10))
diciembre_2021$Cobertura_bruta_educación.cat<-   cut(x = diciembre_2021$Cobertura_bruta_educación, breaks = xalm, labels = xalm[-1])
plot(diciembre_2021$Cobertura_bruta_educación.cat, diciembre_2021$IA_Acum)

xalm=unique(quantile(diciembre_2021$cob_vacunacion_pob2021,0:10/10))
diciembre_2021$cob_vacunacion_pob2021.cat<-   cut(x = diciembre_2021$cob_vacunacion_pob2021, breaks = xalm, labels = xalm[-1])
plot(diciembre_2021$cob_vacunacion_pob2021.cat, diciembre_2021$IA_Acum)

xalm=unique(quantile(diciembre_2021$Superficie_Km2,0:10/10))
diciembre_2021$Superficie_Km2.cat<-   cut(x = diciembre_2021$Superficie_Km2, breaks = xalm, labels = xalm[-1])
plot(diciembre_2021$Superficie_Km2.cat, diciembre_2021$IA_Acum)



#Shape municipios colombia 
municipios=st_read ( "D:/MAESTRIA BIOESTADISITICA/TESIS/BASE DE DATOS/TESIS/fuentes/mpio2/Munpio.shp")
municipios$Cod_DIVIPOLA<-as.numeric(municipios$MpCodigo)
diciembre_2021<- filter(data, year==22)

municipios<-left_join(municipios, diciembre_2021, by="Cod_DIVIPOLA")
municipios <- municipios %>%  filter(MpCodigo!= "88001")
municipios <- municipios %>%  filter(MpCodigo!= "88564")

plot1<-ggplot(data = municipios) +
  geom_sf(aes(fill = poblacion_urbana)) + 
  scale_fill_gradient(low = "green",  high = "red", na.value = "NA") 

 


plot2 <-ggplot(data = municipios) +
  geom_sf(aes(fill = densidad_pob)) + 
  scale_fill_gradient(low = "green",  high = "red", na.value = "NA")



plot3<- ggplot(data = municipios) +
  geom_sf(aes(fill = Aeropuerto_Nal)) 

plot4<-ggplot(data = municipios) +
  geom_sf(aes(fill = Cobertura_bruta_educación)) + 
  scale_fill_gradient(low = "green",  high = "red", na.value = "NA") 

plot5<- ggplot(data = municipios) +
  geom_sf(aes(fill = IPM_MUN)) + 
  scale_fill_gradient(low = "green",  high = "red", na.value = "NA")

plot6<- ggplot(data = municipios) +
  geom_sf(aes(fill = Indice_Desempeño_Fiscal)) + 
  scale_fill_gradient(low = "green",  high = "red", na.value = "NA") 

  
plot7<- ggplot(data = municipios) +
  geom_sf(aes(fill = DIM_INSTITUCIONAL)) + 
  scale_fill_gradient(low = "green",  high = "red", na.value = "NA")
  
plot8<- ggplot(data = municipios) +
  geom_sf(aes(fill = Tasa_mortalidadGEN)) + 
  scale_fill_gradient(low = "green",  high = "red", na.value = "NA")
 
plot9<- ggplot(data = municipios) +
  geom_sf(aes(fill = cob_vacunacion_pob2021)) + 
  scale_fill_gradient(low = "green",  high = "red", na.value = "NA")

plot10<-  ggplot(data = municipios) +
  geom_sf(aes(fill = IA_Acum)) + 
  scale_fill_gradient(low = "green",  high = "red", na.value = "NA") 

plot11<- ggplot(data = municipios) +
  geom_sf(aes(fill = PRE_DM)) + 
  scale_fill_gradient(low = "green",  high = "red", na.value = "NA") 
  
plot12<-  ggplot(data = municipios) +
  geom_sf(aes(fill = PRE_ERC)) + 
  scale_fill_gradient(low = "green",  high = "red", na.value = "NA") 
  

plot13 <-ggplot(data = municipios) +
  geom_sf(aes(fill = Altitud_media)) + 
  scale_fill_gradient(low = "green",  high = "red", na.value = "NA")  


plot14 <-ggplot(data = municipios) +
  geom_sf(aes(fill = Superficie_Km2)) + 
  scale_fill_gradient(low = "green",  high = "red", na.value = "NA")  

  
#merge all three plots within one grid (and visualize this)
grid.arrange(plot1, plot2, ncol=2) #arranges plots within grid
grid.arrange(plot3, plot4, ncol=2)
grid.arrange(plot5, plot6, ncol=2) #arranges plots within grid
grid.arrange(plot7, plot8, ncol=2)
grid.arrange(plot9, plot10,ncol=2) #arranges plots within grid
grid.arrange(plot11, plot12,ncol=2) 
grid.arrange(plot13, plot14,ncol=2)






#save
#g <- arrangeGrob(plot1, plot2, plot3, nrow=3) #generates g
#ggsave(file="whatever.PNG", g) #saves g


casos_mes_area<- dcast(data, Cod_DIVIPOLA ~ year, value.var = "Casos")
casos_mes_area[casos_mes_area == 0] <- NA


municipios=st_read ( "D:/MAESTRIA BIOESTADISITICA/TESIS/BASE DE DATOS/TESIS/fuentes/mpio2/Munpio.shp")
municipios$Cod_DIVIPOLA<-as.numeric(municipios$MpCodigo)
municipios<-left_join(municipios, casos_mes_area, by="Cod_DIVIPOLA")
municipios <- municipios %>%  filter(MpCodigo!= "88001")
municipios <- municipios %>%  filter(MpCodigo!= "88564")


periodo1 <-ggplot(data = municipios) +
  geom_sf(aes(fill = `1`)) + 
  scale_fill_gradient(low = "green", high = "red", na.value = "NA") +
  labs(title = "Marzo 2020 ")

periodo3 <-ggplot(data = municipios) +
  geom_sf(aes(fill = `3`)) + 
  scale_fill_gradient(low = "green", high = "red", na.value = "NA") +
  labs(title = "Mayo 2020 ")

periodo5 <-ggplot(data = municipios) +
  geom_sf(aes(fill = `5`)) + 
  scale_fill_gradient(low = "green", high = "red", na.value = "NA") +
  labs(title = "Julio 2020 ")


periodo7 <-ggplot(data = municipios) +
  geom_sf(aes(fill = `7`)) + 
  scale_fill_gradient(low = "green", high = "red", na.value = "NA") +
  labs(title = "Septiembre 2020 ")



periodo9 <-ggplot(data = municipios) +
  geom_sf(aes(fill = `9`)) + 
  scale_fill_gradient(low = "green", high = "red", na.value = "NA") +
  labs(title = "Noviembre 2020 ")

periodo11 <-ggplot(data = municipios) +
  geom_sf(aes(fill = `11`)) + 
  scale_fill_gradient(low = "green", high = "red", na.value = "NA") +
  labs(title = "Enero 2021 ")

periodo13 <-ggplot(data = municipios) +
  geom_sf(aes(fill = `13`)) + 
  scale_fill_gradient(low = "green", high = "red", na.value = "NA") +
  labs(title = "Marzo 2021")


periodo15 <-ggplot(data = municipios) +
  geom_sf(aes(fill = `15`)) + 
  scale_fill_gradient(low = "green", high = "red", na.value = "NA") +
  labs(title = "Mayo 2020 ")




periodo17 <-ggplot(data = municipios) +
  geom_sf(aes(fill = `17`)) + 
  scale_fill_gradient(low = "green", high = "red", na.value = "NA") +
  labs(title = "Julio 2020 ")

periodo19 <-ggplot(data = municipios) +
  geom_sf(aes(fill = `19`)) + 
  scale_fill_gradient(low = "green", high = "red", na.value = "NA") +
  labs(title = "Septiembre 2021 ")

periodo21 <-ggplot(data = municipios) +
  geom_sf(aes(fill = `21`)) + 
  scale_fill_gradient(low = "green", high = "red", na.value = "NA") +
  labs(title = "Noviembre 2021")


periodo22 <-ggplot(data = municipios) +
  geom_sf(aes(fill = `22`)) + 
  scale_fill_gradient(low = "green", high = "red", na.value = "NA") +
  labs(title = "Diciembre 2021")


windows()

grid.arrange(periodo1, periodo3,periodo5, periodo7, ncol=2, nrow= 2)
grid.arrange(periodo9, periodo11,periodo13, periodo15, ncol=2, nrow= 2)
grid.arrange(periodo17, periodo19,periodo21, periodo22, ncol=2, nrow= 2)


remove(periodo1,periodo11, periodo13, periodo15, periodo17, periodo19, periodo21, periodo22, periodo3, periodo5, periodo7, periodo9)
remove(plot1, plot2, plot3,plot4,plot5,plot6, plot7, plot8, plot9, plot10, plot11,plot12, plot13, plot14)

# correlacion Espacial 

# Leer datos

Colombia1_1 <- readShapePoly("D:/MAESTRIA BIOESTADISITICA/TESIS/BASE DE DATOS/TESIS/fuentes/mpio2/Munpio.shp")
Colombia_0 <- readOGR("D:/MAESTRIA BIOESTADISITICA/TESIS/BASE DE DATOS/TESIS/fuentes/mpio2/Munpio.shp")

#eliminando areas no municipalizadas

Colombia1_1 <- Colombia1_1 [-c(3, 4, 5, 6, 7, 8, 9, 11, 12, 19, 38, 84, 109, 136, 140, 145, 170, 187, 219, 225, 1120, 1121),]
Colombia_0<- Colombia_0[-c(0,3, 4, 5, 6, 7, 8, 9, 11, 12, 19, 38, 84, 109, 136, 140, 145, 170, 187, 219, 225, 1120, 1121),]

##eliminando leticia, puerto nariño y taraira 

Colombia1 <- Colombia1_1 [-c(1,2,3),]
Colombia <- Colombia_0 [-c(1,2,3),]
remove(Colombia1_1,Colombia_0)

temp<- poly2nb(Colombia ) ##es el temp en cameleti (temp <- poly2nb(london.gen))
nb2INLA("COVID.graph",temp)  ## nb2INLA("LDN.graph", temp)
Colombia.adj<- paste(getwd(),"/COVID.graph",sep="")   ### LDN.adj <- paste(getwd(),"/LDN.graph",sep="")
summary(temp)

## descargando shape para cargar en GEODA y tener un archivo GAL tipo REINA 

#writeSpatialShape(Colombia, "Colombia").
#writeSpatialShape(Colombia1, "Colombia1")

# Read neighbour
Colombia.nb <- read.gal("D:/MAESTRIA BIOESTADISITICA/TESIS/BASE DE DATOS/TESIS/COVID.gal", region.id = Colombia@data$MpCodigo)
summary(Colombia.nb)

plot(Colombia, border = "grey60")
plot(Colombia.nb, coordinates(Colombia), pch = 19, cex = 0.6, add = TRUE)




# Neighbour Objects, k=1, minimum distance
# nbdist calculate the distance corresponding to the neighbour object
coords1 <- coordinates(Colombia)
IDs1 <- Colombia@data$MpCodigo

#knearneigh
# La función devuelve una matriz con los índices de los puntos pertenecientes al conjunto de los k vecinos más cercanos
# el uno del otro.
#knn2nb
# La función convierte un objeto knn devuelto por knearneigh en una lista de vecinos de
# class nb con una lista de vectores enteros que contienen identificadores de números de regiones vecinas.

Co8_nb <- knn2nb(knearneigh(coords1, k = 1), row.names = IDs1)
Co9_nb <- knn2nb(knearneigh(coords1, k = 2), row.names = IDs1)
Co10_nb <- knn2nb(knearneigh(coords1, k = 4), row.names = IDs1)
dsts1 <- unlist(nbdists(Co8_nb, coords1))
Co11_nb <- dnearneigh(coords1, d1 = 0, d2 = 0.75 * max(dsts1), row.names = IDs1)


# Objetos de pesos espaciales
# Matriz de peso
#nb2listw<- enumera el objeto y lo convierte en un objeto de peso

# Zero.policia= VERDADERO

#Co0_lw_W <- nb2listw(Colombia.nb,zero.policy=TRUE, glist=TRUE) ##
Co0_lw_W <- nb2listw(Colombia.nb,zero.policy=TRUE)
print(Co0_lw_W, zero.policy = TRUE)
Co0_lw_W
names(Co0_lw_W)
names(attributes(Co0_lw_W))

Co0_lw_W$neighbours
Co0_lw_W$weights
Co0_lw_W$style

# Calcular promedio
1/rev(range(card(Co0_lw_W$neighbours)))
summary(unlist(Co0_lw_W$weights))
summary(sapply(Co0_lw_W$weights, sum))


# Ajuste estilo B, conserva un peso de unidad
# relación

Co0_lw_B <- nb2listw(Colombia.nb, style = "B",zero.policy=TRUE)
print(Co0_lw_B, zero.policy = TRUE)
summary(unlist(Co0_lw_B$weights))
summary(sapply(Co0_lw_B$weights, sum))

# # Relaciones fuertes en los vecinos

dsts1 <- nbdists(Colombia.nb, coordinates(Colombia))
idw1 <- lapply(dsts1, function(x) 1/(x/1000))
Co0_lw_idwB <- nb2listw(Colombia.nb, glist = idw1, style = "B",zero.policy=TRUE)
summary(unlist(Co0_lw_idwB$weights))

Co0_lw_D1 <- nb2listw(Co11_nb, style = "B", zero.policy = TRUE)
print(Co0_lw_D1, zero.policy = TRUE)
Co14_nb <- Colombia.nb

Co16_nb <-Co8_nb
isTRUE(all.equal(Co8_nb, Co16_nb, check.attributes = FALSE))

# Spatial Statistics Approaches
# Mapas 
# Clases y Colores
nclr <- 5 # Numero de colores
plotclr <- brewer.pal(nclr,"Blues") # Tonalidad Axules
AcrProv1=Colombia@data$MpNombre
cent <- coordinates(Colombia)
pal1 <- brewer.pal(6,"Reds")


# moran para cada mes
# MARZO 2020

Tabla2=as.data.frame(data %>% filter(Fecha == as.Date("2020-03-01")) 
                     %>% arrange(desc(Cod_DIVIPOLA)) %>% select(Cod_DIVIPOLA,Pob,IA_mes,IA_Acum, Casos_Acum, Casos))
aux= Colombia@data
aux=as.data.frame(aux %>% select(  MpCodigo, MpNombre))
aux$MpCodigo= as.double(aux$MpCodigo)
Tabla2$Cod_DIVIPOLA=as.double(Tabla2$Cod_DIVIPOLA)
aux=aux %>% left_join(Tabla2, by = c("MpCodigo" = "Cod_DIVIPOLA"))
aux[is.na(aux)] <- 0

aux$SRM=(sum(aux$Casos_Acum)/sum(aux$Pob))*(aux$Pob/aux$Casos_Acum)
aux$SRM=((aux$Casos_Acum)/(aux$Pob))*(aux$Pob/aux$Casos_Acum)
aux[aux==Inf] <- 0
aux[is.na(aux)] <- 0



row.names(aux) <- row.names(Colombia)
poligonos.data <- SpatialPolygonsDataFrame(Colombia,aux)

#Tasa_Contagios <- poligonos.data$Casos/poligonos.data$Pob
#Tasa_Contagios[is.na(Tasa_Contagios)] <- 0
#Tasa_Contagios[Tasa_Contagios==Inf] <- 0



windows()
# mapa incidencia mes
aux2<-aux
aux2[aux2 == 0] <- NA


class <- classIntervals(round(aux2$IA_mes,3),nclr,style="equal")
colcode <- findColours(class,plotclr)
plot (poligonos.data, col=colcode, border="grey", axes=T)
title(main = "Incidencia COVID 19, Marzo 2020 ",cex=3)
legend("bottomright",legend = names(attr(colcode,"table")),fill= attr(colcode,"palette"),cex=0.75)

# mapa riesgos relativos 
windows()
class1 <- classIntervals(round(aux2$SRM,3),nclr,style="equal")
spplot(poligonos.data, "SRM", at = class1$brks,col.regions=pal1)


Tabla_marzo2020=poligonos.data@data
Tabla_marzo2020[is.na(Tabla_marzo2020)] <- 0



# ABRIL 2020

Tabla2=as.data.frame(data %>% filter(Fecha == as.Date("2020-04-01")) 
                     %>% arrange(desc(Cod_DIVIPOLA)) %>% select(Cod_DIVIPOLA,Pob,IA_mes,IA_Acum, Casos_Acum, Casos))
aux= Colombia@data
aux=as.data.frame(aux %>% select(  MpCodigo, MpNombre))
aux$MpCodigo= as.double(aux$MpCodigo)
Tabla2$Cod_DIVIPOLA=as.double(Tabla2$Cod_DIVIPOLA)
aux=aux %>% left_join(Tabla2, by = c("MpCodigo" = "Cod_DIVIPOLA"))
aux[is.na(aux)] <- 0

aux$SRM=(sum(aux$Casos_Acum)/sum(aux$Pob))*(aux$Pob/aux$Casos_Acum)
aux[aux==Inf] <- 0
aux[is.na(aux)] <- 0


row.names(aux) <- row.names(Colombia)
poligonos.data <- SpatialPolygonsDataFrame(Colombia,aux)

Tasa_Contagios <- poligonos.data$Casos/poligonos.data$Pob
Tasa_Contagios[is.na(Tasa_Contagios)] <- 0
Tasa_Contagios[Tasa_Contagios==Inf] <- 0

windows()

# mapa incidencia mes


aux2<-aux
aux2[aux2 == 0] <- NA
class <- classIntervals(round(aux2$IA_mes,3),nclr,style="equal")
colcode <- findColours(class,plotclr)
plot (poligonos.data, col=colcode, border="grey", axes=T)
title(main = "Incidencia COVID 19, Abril 2020 ",cex=3)
legend("bottomright",legend = names(attr(colcode,"table")),fill= attr(colcode,"palette"),cex=0.75)

# mapa riesgos relativos 
windows()
class1 <- classIntervals(round(aux2$SRM,3),nclr,style="equal")
spplot(poligonos.data, "SRM", at = class1$brks,col.regions=pal1)


Tabla_abril2020=poligonos.data@data
Tabla_abril2020[is.na(Tabla_abril2020)] <- 0

# Mayo 2020


Tabla2=as.data.frame(data %>% filter(Fecha == as.Date("2020-05-01")) 
                     %>% arrange(desc(Cod_DIVIPOLA)) %>% select(Cod_DIVIPOLA,Pob,IA_mes,IA_Acum, Casos_Acum, Casos))
aux= Colombia@data
aux=as.data.frame(aux %>% select(  MpCodigo, MpNombre))
aux$MpCodigo= as.double(aux$MpCodigo)
Tabla2$Cod_DIVIPOLA=as.double(Tabla2$Cod_DIVIPOLA)
aux=aux %>% left_join(Tabla2, by = c("MpCodigo" = "Cod_DIVIPOLA"))
aux[is.na(aux)] <- 0

aux$SRM=(sum(aux$Casos_Acum)/sum(aux$Pob))*(aux$Pob/aux$Casos_Acum)
aux[aux==Inf] <- 0
aux[is.na(aux)] <- 0


row.names(aux) <- row.names(Colombia)
poligonos.data <- SpatialPolygonsDataFrame(Colombia,aux)

Tasa_Contagios <- poligonos.data$Casos/poligonos.data$Pob
Tasa_Contagios[is.na(Tasa_Contagios)] <- 0
Tasa_Contagios[Tasa_Contagios==Inf] <- 0

windows()

# mapa incidencia mes

aux2<-aux
aux2[aux2 == 0] <- NA
class <- classIntervals(round(aux2$IA_mes,3),nclr,style="equal")
colcode <- findColours(class,plotclr)
plot (poligonos.data, col=colcode, border="grey", axes=T)
title(main = "Incidencia COVID 19, Mayo 2020 ",cex=3)
legend("bottomright",legend = names(attr(colcode,"table")),fill= attr(colcode,"palette"),cex=0.75)

# mapa riesgos relativos 
windows()
class1 <- classIntervals(round(aux2$SRM,3),nclr,style="equal")
spplot(poligonos.data, "SRM", at = class1$brks,col.regions=pal1)


Tabla_mayo2020=poligonos.data@data
Tabla_mayo2020[is.na(Tabla_mayo2020)] <- 0

# Junio 2020


Tabla2=as.data.frame(data %>% filter(Fecha == as.Date("2020-06-01")) 
                     %>% arrange(desc(Cod_DIVIPOLA)) %>% select(Cod_DIVIPOLA,Pob,IA_mes,IA_Acum, Casos_Acum, Casos))
aux= Colombia@data
aux=as.data.frame(aux %>% select(  MpCodigo, MpNombre))
aux$MpCodigo= as.double(aux$MpCodigo)
Tabla2$Cod_DIVIPOLA=as.double(Tabla2$Cod_DIVIPOLA)
aux=aux %>% left_join(Tabla2, by = c("MpCodigo" = "Cod_DIVIPOLA"))
aux[is.na(aux)] <- 0

aux$SRM=(sum(aux$Casos_Acum)/sum(aux$Pob))*(aux$Pob/aux$Casos_Acum)
aux[aux==Inf] <- 0
aux[is.na(aux)] <- 0


row.names(aux) <- row.names(Colombia)
poligonos.data <- SpatialPolygonsDataFrame(Colombia,aux)

Tasa_Contagios <- poligonos.data$Casos/poligonos.data$Pob
Tasa_Contagios[is.na(Tasa_Contagios)] <- 0
Tasa_Contagios[Tasa_Contagios==Inf] <- 0

windows()

# mapa incidencia mes
aux2<-aux
aux2[aux2 == 0] <- NA
class <- classIntervals(round(aux2$IA_mes,3),nclr,style="equal")
colcode <- findColours(class,plotclr)
plot (poligonos.data, col=colcode, border="grey", axes=T)
title(main = "Incidencia COVID 19, Junio 2020 ",cex=3)
legend("bottomright",legend = names(attr(colcode,"table")),fill= attr(colcode,"palette"),cex=0.75)

# mapa riesgos relativos 
windows()
class1 <- classIntervals(round(aux2$SRM,3),nclr,style="equal")
spplot(poligonos.data, "SRM", at = class1$brks,col.regions=pal1)


Tabla_junio2020=poligonos.data@data
Tabla_junio2020[is.na(Tabla_junio2020)] <- 0


# Julio 2020

Tabla2=as.data.frame(data %>% filter(Fecha == as.Date("2020-07-01")) 
                     %>% arrange(desc(Cod_DIVIPOLA)) %>% select(Cod_DIVIPOLA,Pob,IA_mes,IA_Acum, Casos_Acum, Casos))
aux= Colombia@data
aux=as.data.frame(aux %>% select(  MpCodigo, MpNombre))
aux$MpCodigo= as.double(aux$MpCodigo)
Tabla2$Cod_DIVIPOLA=as.double(Tabla2$Cod_DIVIPOLA)
aux=aux %>% left_join(Tabla2, by = c("MpCodigo" = "Cod_DIVIPOLA"))
aux[is.na(aux)] <- 0

aux$SRM=(sum(aux$Casos_Acum)/sum(aux$Pob))*(aux$Pob/aux$Casos_Acum)
aux[aux==Inf] <- 0
aux[is.na(aux)] <- 0


row.names(aux) <- row.names(Colombia)
poligonos.data <- SpatialPolygonsDataFrame(Colombia,aux)

Tasa_Contagios <- poligonos.data$Casos/poligonos.data$Pob
Tasa_Contagios[is.na(Tasa_Contagios)] <- 0
Tasa_Contagios[Tasa_Contagios==Inf] <- 0

windows()

# mapa incidencia mes
aux2<-aux
aux2[aux2 == 0] <- NA
class <- classIntervals(round(aux2$IA_mes,3),nclr,style="equal")
colcode <- findColours(class,plotclr)
plot (poligonos.data, col=colcode, border="grey", axes=T)
title(main = "Incidencia COVID 19, Julio 2020 ",cex=3)
legend("bottomright",legend = names(attr(colcode,"table")),fill= attr(colcode,"palette"),cex=0.75)

# mapa riesgos relativos 
windows()
class1 <- classIntervals(round(aux2$SRM,3),nclr,style="equal")
spplot(poligonos.data, "SRM", at = class1$brks,col.regions=pal1)

Tabla_julio2020=poligonos.data@data
Tabla_julio2020[is.na(Tabla_julio2020)] <- 0


# Agosto 2020

Tabla2=as.data.frame(data %>% filter(Fecha == as.Date("2020-08-01")) 
                     %>% arrange(desc(Cod_DIVIPOLA)) %>% select(Cod_DIVIPOLA,Pob,IA_mes,IA_Acum, Casos_Acum, Casos))
aux= Colombia@data
aux=as.data.frame(aux %>% select(  MpCodigo, MpNombre))
aux$MpCodigo= as.double(aux$MpCodigo)
Tabla2$Cod_DIVIPOLA=as.double(Tabla2$Cod_DIVIPOLA)
aux=aux %>% left_join(Tabla2, by = c("MpCodigo" = "Cod_DIVIPOLA"))
aux[is.na(aux)] <- 0

aux$SRM=(sum(aux$Casos_Acum)/sum(aux$Pob))*(aux$Pob/aux$Casos_Acum)
aux[aux==Inf] <- 0
aux[is.na(aux)] <- 0


row.names(aux) <- row.names(Colombia)
poligonos.data <- SpatialPolygonsDataFrame(Colombia,aux)

Tasa_Contagios <- poligonos.data$Casos/poligonos.data$Pob
Tasa_Contagios[is.na(Tasa_Contagios)] <- 0
Tasa_Contagios[Tasa_Contagios==Inf] <- 0

windows()

# mapa incidencia mes

aux2<-aux
aux2[aux2 == 0] <- NA
class <- classIntervals(round(aux2$IA_mes,3),nclr,style="equal")
colcode <- findColours(class,plotclr)
plot (poligonos.data, col=colcode, border="grey", axes=T)
title(main = "Incidencia COVID 19, Agosto 2020 ",cex=3)
legend("bottomright",legend = names(attr(colcode,"table")),fill= attr(colcode,"palette"),cex=0.75)

# mapa riesgos relativos 
windows()
class1 <- classIntervals(round(aux2$SRM,3),nclr,style="equal")
spplot(poligonos.data, "SRM", at = class1$brks,col.regions=pal1)


Tabla_agosto2020=poligonos.data@data
Tabla_agosto2020[is.na(Tabla_agosto2020)] <- 0


# Septiembre 2020

Tabla2=as.data.frame(data %>% filter(Fecha == as.Date("2020-09-01")) 
                     %>% arrange(desc(Cod_DIVIPOLA)) %>% select(Cod_DIVIPOLA,Pob,IA_mes,IA_Acum, Casos_Acum, Casos))
aux= Colombia@data
aux=as.data.frame(aux %>% select(  MpCodigo, MpNombre))
aux$MpCodigo= as.double(aux$MpCodigo)
Tabla2$Cod_DIVIPOLA=as.double(Tabla2$Cod_DIVIPOLA)
aux=aux %>% left_join(Tabla2, by = c("MpCodigo" = "Cod_DIVIPOLA"))
aux[is.na(aux)] <- 0

aux$SRM=(sum(aux$Casos_Acum)/sum(aux$Pob))*(aux$Pob/aux$Casos_Acum)
aux[aux==Inf] <- 0
aux[is.na(aux)] <- 0


row.names(aux) <- row.names(Colombia)
poligonos.data <- SpatialPolygonsDataFrame(Colombia,aux)

Tasa_Contagios <- poligonos.data$Casos/poligonos.data$Pob
Tasa_Contagios[is.na(Tasa_Contagios)] <- 0
Tasa_Contagios[Tasa_Contagios==Inf] <- 0

windows()

# mapa incidencia mes
aux2<-aux
aux2[aux2 == 0] <- NA
class <- classIntervals(round(aux2$IA_mes,3),nclr,style="equal")
colcode <- findColours(class,plotclr)
plot (poligonos.data, col=colcode, border="grey", axes=T)
title(main = "Incidencia COVID 19, Septiembre 2020 ",cex=3)
legend("bottomright",legend = names(attr(colcode,"table")),fill= attr(colcode,"palette"),cex=0.75)

# mapa riesgos relativos 
windows()
class1 <- classIntervals(round(aux2$SRM,3),nclr,style="equal")
spplot(poligonos.data, "SRM", at = class1$brks,col.regions=pal1)


Tabla_septiembre2020=poligonos.data@data
Tabla_septiembre2020[is.na(Tabla_septiembre2020)] <- 0


# Octubre 2020

Tabla2=as.data.frame(data %>% filter(Fecha == as.Date("2020-10-01")) 
                     %>% arrange(desc(Cod_DIVIPOLA)) %>% select(Cod_DIVIPOLA,Pob,IA_mes,IA_Acum, Casos_Acum, Casos))
aux= Colombia@data
aux=as.data.frame(aux %>% select(  MpCodigo, MpNombre))
aux$MpCodigo= as.double(aux$MpCodigo)
Tabla2$Cod_DIVIPOLA=as.double(Tabla2$Cod_DIVIPOLA)
aux=aux %>% left_join(Tabla2, by = c("MpCodigo" = "Cod_DIVIPOLA"))
aux[is.na(aux)] <- 0

aux$SRM=(sum(aux$Casos_Acum)/sum(aux$Pob))*(aux$Pob/aux$Casos_Acum)
aux[aux==Inf] <- 0
aux[is.na(aux)] <- 0


row.names(aux) <- row.names(Colombia)
poligonos.data <- SpatialPolygonsDataFrame(Colombia,aux)

Tasa_Contagios <- poligonos.data$Casos/poligonos.data$Pob
Tasa_Contagios[is.na(Tasa_Contagios)] <- 0
Tasa_Contagios[Tasa_Contagios==Inf] <- 0

windows()

# mapa incidencia mes

aux2<-aux
aux2[aux2 == 0] <- NA
class <- classIntervals(round(aux2$IA_mes,3),nclr,style="equal")
colcode <- findColours(class,plotclr)
plot (poligonos.data, col=colcode, border="grey", axes=T)
title(main = "Incidencia COVID 19, Octubre 2020 ",cex=3)
legend("bottomright",legend = names(attr(colcode,"table")),fill= attr(colcode,"palette"),cex=0.75)

# mapa riesgos relativos 
windows()
class1 <- classIntervals(round(aux2$SRM,3),nclr,style="equal")
spplot(poligonos.data, "SRM", at = class1$brks,col.regions=pal1)

Tabla_octubre2020=poligonos.data@data
Tabla_octubre2020[is.na(Tabla_octubre2020)] <- 0



# Noviembre 2020

Tabla2=as.data.frame(data %>% filter(Fecha == as.Date("2020-11-01")) 
                     %>% arrange(desc(Cod_DIVIPOLA)) %>% select(Cod_DIVIPOLA,Pob,IA_mes,IA_Acum, Casos_Acum, Casos))
aux= Colombia@data
aux=as.data.frame(aux %>% select(  MpCodigo, MpNombre))
aux$MpCodigo= as.double(aux$MpCodigo)
Tabla2$Cod_DIVIPOLA=as.double(Tabla2$Cod_DIVIPOLA)
aux=aux %>% left_join(Tabla2, by = c("MpCodigo" = "Cod_DIVIPOLA"))
aux[is.na(aux)] <- 0

aux$SRM=(sum(aux$Casos_Acum)/sum(aux$Pob))*(aux$Pob/aux$Casos_Acum)
aux[aux==Inf] <- 0
aux[is.na(aux)] <- 0


row.names(aux) <- row.names(Colombia)
poligonos.data <- SpatialPolygonsDataFrame(Colombia,aux)

Tasa_Contagios <- poligonos.data$Casos/poligonos.data$Pob
Tasa_Contagios[is.na(Tasa_Contagios)] <- 0
Tasa_Contagios[Tasa_Contagios==Inf] <- 0

windows()

# mapa incidencia mes
aux2<-aux
aux2[aux2 == 0] <- NA
class <- classIntervals(round(aux2$IA_mes,3),nclr,style="equal")
colcode <- findColours(class,plotclr)
plot (poligonos.data, col=colcode, border="grey", axes=T)
title(main = "Incidencia COVID 19, Noviembre 2020 ",cex=3)
legend("bottomright",legend = names(attr(colcode,"table")),fill= attr(colcode,"palette"),cex=0.75)

# mapa riesgos relativos 
windows()
class1 <- classIntervals(round(aux2$SRM,3),nclr,style="equal")
spplot(poligonos.data, "SRM", at = class1$brks,col.regions=pal1)


Tabla_noviembre2020=poligonos.data@data
Tabla_noviembre2020[is.na(Tabla_noviembre2020)] <- 0

# Diciembre 2020

Tabla2=as.data.frame(data %>% filter(Fecha == as.Date("2020-12-01")) 
                     %>% arrange(desc(Cod_DIVIPOLA)) %>% select(Cod_DIVIPOLA,Pob,IA_mes,IA_Acum, Casos_Acum, Casos))
aux= Colombia@data
aux=as.data.frame(aux %>% select(  MpCodigo, MpNombre))
aux$MpCodigo= as.double(aux$MpCodigo)
Tabla2$Cod_DIVIPOLA=as.double(Tabla2$Cod_DIVIPOLA)
aux=aux %>% left_join(Tabla2, by = c("MpCodigo" = "Cod_DIVIPOLA"))
aux[is.na(aux)] <- 0

aux$SRM=(sum(aux$Casos_Acum)/sum(aux$Pob))*(aux$Pob/aux$Casos_Acum)
aux[aux==Inf] <- 0
aux[is.na(aux)] <- 0


row.names(aux) <- row.names(Colombia)
poligonos.data <- SpatialPolygonsDataFrame(Colombia,aux)

Tasa_Contagios <- poligonos.data$Casos/poligonos.data$Pob
Tasa_Contagios[is.na(Tasa_Contagios)] <- 0
Tasa_Contagios[Tasa_Contagios==Inf] <- 0

windows()

# mapa incidencia mes
aux2<-aux
aux2[aux2 == 0] <- NA
class <- classIntervals(round(aux2$IA_mes,3),nclr,style="equal")
colcode <- findColours(class,plotclr)
plot (poligonos.data, col=colcode, border="grey", axes=T)
title(main = "Incidencia COVID 19, Diciembre 2020 ",cex=3)
legend("bottomright",legend = names(attr(colcode,"table")),fill= attr(colcode,"palette"),cex=0.75)

# mapa riesgos relativos 
windows()
class1 <- classIntervals(round(aux2$SRM,3),nclr,style="equal")
spplot(poligonos.data, "SRM", at = class1$brks,col.regions=pal1)


Tabla_diciembre2020=poligonos.data@data
Tabla_diciembre2020[is.na(Tabla_diciembre2020)] <- 0


# ENERO 2021

Tabla2=as.data.frame(data %>% filter(Fecha == as.Date("2021-01-01")) 
                     %>% arrange(desc(Cod_DIVIPOLA)) %>% select(Cod_DIVIPOLA,Pob,IA_mes,IA_Acum, Casos_Acum, Casos))
aux= Colombia@data
aux=as.data.frame(aux %>% select(  MpCodigo, MpNombre))
aux$MpCodigo= as.double(aux$MpCodigo)
Tabla2$Cod_DIVIPOLA=as.double(Tabla2$Cod_DIVIPOLA)
aux=aux %>% left_join(Tabla2, by = c("MpCodigo" = "Cod_DIVIPOLA"))
aux[is.na(aux)] <- 0

aux$SRM=(sum(aux$Casos_Acum)/sum(aux$Pob))*(aux$Pob/aux$Casos_Acum)
aux[aux==Inf] <- 0
aux[is.na(aux)] <- 0


row.names(aux) <- row.names(Colombia)
poligonos.data <- SpatialPolygonsDataFrame(Colombia,aux)

Tasa_Contagios <- poligonos.data$Casos/poligonos.data$Pob
Tasa_Contagios[is.na(Tasa_Contagios)] <- 0
Tasa_Contagios[Tasa_Contagios==Inf] <- 0

windows()

# mapa incidencia mes
aux2<-aux
aux2[aux2 == 0] <- NA
class <- classIntervals(round(aux2$IA_mes,3),nclr,style="equal")
colcode <- findColours(class,plotclr)
plot (poligonos.data, col=colcode, border="grey", axes=T)
title(main = "Incidencia COVID 19, Enero 2021 ",cex=3)
legend("bottomright",legend = names(attr(colcode,"table")),fill= attr(colcode,"palette"),cex=0.75)

# mapa riesgos relativos 
windows()
class1 <- classIntervals(round(aux2$SRM,3),nclr,style="equal")
spplot(poligonos.data, "SRM", at = class1$brks,col.regions=pal1)


Tabla_enero2021=poligonos.data@data
Tabla_enero2021[is.na(Tabla_enero2021)] <- 0


# FEBRERO  2021

Tabla2=as.data.frame(data %>% filter(Fecha == as.Date("2021-02-01")) 
                     %>% arrange(desc(Cod_DIVIPOLA)) %>% select(Cod_DIVIPOLA,Pob,IA_mes,IA_Acum, Casos_Acum, Casos))
aux= Colombia@data
aux=as.data.frame(aux %>% select(  MpCodigo, MpNombre))
aux$MpCodigo= as.double(aux$MpCodigo)
Tabla2$Cod_DIVIPOLA=as.double(Tabla2$Cod_DIVIPOLA)
aux=aux %>% left_join(Tabla2, by = c("MpCodigo" = "Cod_DIVIPOLA"))
aux[is.na(aux)] <- 0

aux$SRM=(sum(aux$Casos_Acum)/sum(aux$Pob))*(aux$Pob/aux$Casos_Acum)
aux[aux==Inf] <- 0
aux[is.na(aux)] <- 0


row.names(aux) <- row.names(Colombia)
poligonos.data <- SpatialPolygonsDataFrame(Colombia,aux)

Tasa_Contagios <- poligonos.data$Casos/poligonos.data$Pob
Tasa_Contagios[is.na(Tasa_Contagios)] <- 0
Tasa_Contagios[Tasa_Contagios==Inf] <- 0

windows()

# mapa incidencia mes
aux2<-aux
aux2[aux2 == 0] <- NA
class <- classIntervals(round(aux2$IA_mes,3),nclr,style="equal")
colcode <- findColours(class,plotclr)
plot (poligonos.data, col=colcode, border="grey", axes=T)
title(main = "Incidencia COVID 19, Febrero 2021 ",cex=3)
legend("bottomright",legend = names(attr(colcode,"table")),fill= attr(colcode,"palette"),cex=0.75)

# mapa riesgos relativos 
windows()
class1 <- classIntervals(round(aux2$SRM,3),nclr,style="equal")
spplot(poligonos.data, "SRM", at = class1$brks,col.regions=pal1)


Tabla_febrero2021=poligonos.data@data
Tabla_febrero2021[is.na(Tabla_febrero2021)] <- 0


# MARZO 2021

Tabla2=as.data.frame(data %>% filter(Fecha == as.Date("2021-03-01")) 
                     %>% arrange(desc(Cod_DIVIPOLA)) %>% select(Cod_DIVIPOLA,Pob,IA_mes,IA_Acum, Casos_Acum, Casos))
aux= Colombia@data
aux=as.data.frame(aux %>% select(  MpCodigo, MpNombre))
aux$MpCodigo= as.double(aux$MpCodigo)
Tabla2$Cod_DIVIPOLA=as.double(Tabla2$Cod_DIVIPOLA)
aux=aux %>% left_join(Tabla2, by = c("MpCodigo" = "Cod_DIVIPOLA"))
aux[is.na(aux)] <- 0

aux$SRM=(sum(aux$Casos_Acum)/sum(aux$Pob))*(aux$Pob/aux$Casos_Acum)
aux[aux==Inf] <- 0
aux[is.na(aux)] <- 0


row.names(aux) <- row.names(Colombia)
poligonos.data <- SpatialPolygonsDataFrame(Colombia,aux)

Tasa_Contagios <- poligonos.data$Casos/poligonos.data$Pob
Tasa_Contagios[is.na(Tasa_Contagios)] <- 0
Tasa_Contagios[Tasa_Contagios==Inf] <- 0

windows()

# mapa incidencia mes
aux2<-aux
aux2[aux2 == 0] <- NA
class <- classIntervals(round(aux2$IA_mes,3),nclr,style="equal")
colcode <- findColours(class,plotclr)
plot (poligonos.data, col=colcode, border="grey", axes=T)
title(main = "Incidencia COVID 19, Marzo 2021 ",cex=3)
legend("bottomright",legend = names(attr(colcode,"table")),fill= attr(colcode,"palette"),cex=0.75)

# mapa riesgos relativos 
windows()
class1 <- classIntervals(round(aux2$SRM,3),nclr,style="equal")
spplot(poligonos.data, "SRM", at = class1$brks,col.regions=pal1)


Tabla_marzo2021=poligonos.data@data
Tabla_marzo2021[is.na(Tabla_marzo2021)] <- 0



# ABRIL 2021

Tabla2=as.data.frame(data %>% filter(Fecha == as.Date("2021-04-01")) 
                     %>% arrange(desc(Cod_DIVIPOLA)) %>% select(Cod_DIVIPOLA,Pob,IA_mes,IA_Acum, Casos_Acum, Casos))
aux= Colombia@data
aux=as.data.frame(aux %>% select(  MpCodigo, MpNombre))
aux$MpCodigo= as.double(aux$MpCodigo)
Tabla2$Cod_DIVIPOLA=as.double(Tabla2$Cod_DIVIPOLA)
aux=aux %>% left_join(Tabla2, by = c("MpCodigo" = "Cod_DIVIPOLA"))
aux[is.na(aux)] <- 0

aux$SRM=(sum(aux$Casos_Acum)/sum(aux$Pob))*(aux$Pob/aux$Casos_Acum)
aux[aux==Inf] <- 0
aux[is.na(aux)] <- 0


row.names(aux) <- row.names(Colombia)
poligonos.data <- SpatialPolygonsDataFrame(Colombia,aux)

Tasa_Contagios <- poligonos.data$Casos/poligonos.data$Pob
Tasa_Contagios[is.na(Tasa_Contagios)] <- 0
Tasa_Contagios[Tasa_Contagios==Inf] <- 0

windows()

# mapa incidencia mes
aux2<-aux
aux2[aux2 == 0] <- NA
class <- classIntervals(round(aux2$IA_mes,3),nclr,style="equal")
colcode <- findColours(class,plotclr)
plot (poligonos.data, col=colcode, border="grey", axes=T)
title(main = "Incidencia COVID 19, Abril 2021 ",cex=3)
legend("bottomright",legend = names(attr(colcode,"table")),fill= attr(colcode,"palette"),cex=0.75)

# mapa riesgos relativos 
windows()
class1 <- classIntervals(round(aux2$SRM,3),nclr,style="equal")
spplot(poligonos.data, "SRM", at = class1$brks,col.regions=pal1)


Tabla_abril2021=poligonos.data@data
Tabla_abril2021[is.na(Tabla_abril2021)] <- 0




# MAYO 2021

Tabla2=as.data.frame(data %>% filter(Fecha == as.Date("2021-05-01")) 
                     %>% arrange(desc(Cod_DIVIPOLA)) %>% select(Cod_DIVIPOLA,Pob,IA_mes,IA_Acum, Casos_Acum, Casos))
aux= Colombia@data
aux=as.data.frame(aux %>% select(  MpCodigo, MpNombre))
aux$MpCodigo= as.double(aux$MpCodigo)
Tabla2$Cod_DIVIPOLA=as.double(Tabla2$Cod_DIVIPOLA)
aux=aux %>% left_join(Tabla2, by = c("MpCodigo" = "Cod_DIVIPOLA"))
aux[is.na(aux)] <- 0

aux$SRM=(sum(aux$Casos_Acum)/sum(aux$Pob))*(aux$Pob/aux$Casos_Acum)
aux[aux==Inf] <- 0
aux[is.na(aux)] <- 0


row.names(aux) <- row.names(Colombia)
poligonos.data <- SpatialPolygonsDataFrame(Colombia,aux)

Tasa_Contagios <- poligonos.data$Casos/poligonos.data$Pob
Tasa_Contagios[is.na(Tasa_Contagios)] <- 0
Tasa_Contagios[Tasa_Contagios==Inf] <- 0

windows()

# mapa incidencia mes

aux2<-aux
aux2[aux2 == 0] <- NA
class <- classIntervals(round(aux2$IA_mes,3),nclr,style="equal")
colcode <- findColours(class,plotclr)
plot (poligonos.data, col=colcode, border="grey", axes=T)
title(main = "Incidencia COVID 19, Mayo 2021 ",cex=3)
legend("bottomright",legend = names(attr(colcode,"table")),fill= attr(colcode,"palette"),cex=0.75)

# mapa riesgos relativos 
windows()
class1 <- classIntervals(round(aux2$SRM,3),nclr,style="equal")
spplot(poligonos.data, "SRM", at = class1$brks,col.regions=pal1)


Tabla_mayo2021=poligonos.data@data
Tabla_mayo2021[is.na(Tabla_mayo2021)] <- 0



# JUNIO 2021

Tabla2=as.data.frame(data %>% filter(Fecha == as.Date("2021-06-01")) 
                     %>% arrange(desc(Cod_DIVIPOLA)) %>% select(Cod_DIVIPOLA,Pob,IA_mes,IA_Acum, Casos_Acum, Casos))
aux= Colombia@data
aux=as.data.frame(aux %>% select(  MpCodigo, MpNombre))
aux$MpCodigo= as.double(aux$MpCodigo)
Tabla2$Cod_DIVIPOLA=as.double(Tabla2$Cod_DIVIPOLA)
aux=aux %>% left_join(Tabla2, by = c("MpCodigo" = "Cod_DIVIPOLA"))
aux[is.na(aux)] <- 0

aux$SRM=(sum(aux$Casos_Acum)/sum(aux$Pob))*(aux$Pob/aux$Casos_Acum)
aux[aux==Inf] <- 0
aux[is.na(aux)] <- 0


row.names(aux) <- row.names(Colombia)
poligonos.data <- SpatialPolygonsDataFrame(Colombia,aux)

Tasa_Contagios <- poligonos.data$Casos/poligonos.data$Pob
Tasa_Contagios[is.na(Tasa_Contagios)] <- 0
Tasa_Contagios[Tasa_Contagios==Inf] <- 0

windows()

# mapa incidencia mes
aux2<-aux
aux2[aux2 == 0] <- NA
class <- classIntervals(round(aux2$IA_mes,3),nclr,style="equal")
colcode <- findColours(class,plotclr)
plot (poligonos.data, col=colcode, border="grey", axes=T)
title(main = "Incidencia COVID 19, Junio 2021 ",cex=3)
legend("bottomright",legend = names(attr(colcode,"table")),fill= attr(colcode,"palette"),cex=0.75)

# mapa riesgos relativos 
windows()
class1 <- classIntervals(round(aux2$SRM,3),nclr,style="equal")
spplot(poligonos.data, "SRM", at = class1$brks,col.regions=pal1)


Tabla_junio2021=poligonos.data@data
Tabla_junio2021[is.na(Tabla_junio2021)] <- 0



# JULIO 2021

Tabla2=as.data.frame(data %>% filter(Fecha == as.Date("2021-07-01")) 
                     %>% arrange(desc(Cod_DIVIPOLA)) %>% select(Cod_DIVIPOLA,Pob,IA_mes,IA_Acum, Casos_Acum, Casos))
aux= Colombia@data
aux=as.data.frame(aux %>% select(  MpCodigo, MpNombre))
aux$MpCodigo= as.double(aux$MpCodigo)
Tabla2$Cod_DIVIPOLA=as.double(Tabla2$Cod_DIVIPOLA)
aux=aux %>% left_join(Tabla2, by = c("MpCodigo" = "Cod_DIVIPOLA"))
aux[is.na(aux)] <- 0

aux$SRM=(sum(aux$Casos_Acum)/sum(aux$Pob))*(aux$Pob/aux$Casos_Acum)
aux[aux==Inf] <- 0
aux[is.na(aux)] <- 0


row.names(aux) <- row.names(Colombia)
poligonos.data <- SpatialPolygonsDataFrame(Colombia,aux)

Tasa_Contagios <- poligonos.data$Casos/poligonos.data$Pob
Tasa_Contagios[is.na(Tasa_Contagios)] <- 0
Tasa_Contagios[Tasa_Contagios==Inf] <- 0

windows()

# mapa incidencia mes
aux2<-aux
aux2[aux2 == 0] <- NA
class <- classIntervals(round(aux2$IA_mes,3),nclr,style="equal")
colcode <- findColours(class,plotclr)
plot (poligonos.data, col=colcode, border="grey", axes=T)
title(main = "Incidencia COVID 19, Julio 2021 ",cex=3)
legend("bottomright",legend = names(attr(colcode,"table")),fill= attr(colcode,"palette"),cex=0.75)

# mapa riesgos relativos 
windows()
class1 <- classIntervals(round(aux2$SRM,3),nclr,style="equal")
spplot(poligonos.data, "SRM", at = class1$brks,col.regions=pal1)


Tabla_julio2021=poligonos.data@data
Tabla_julio2021[is.na(Tabla_julio2021)] <- 0




# AGOSTO 2021

Tabla2=as.data.frame(data %>% filter(Fecha == as.Date("2021-08-01")) 
                     %>% arrange(desc(Cod_DIVIPOLA)) %>% select(Cod_DIVIPOLA,Pob,IA_mes,IA_Acum, Casos_Acum, Casos))
aux= Colombia@data
aux=as.data.frame(aux %>% select(  MpCodigo, MpNombre))
aux$MpCodigo= as.double(aux$MpCodigo)
Tabla2$Cod_DIVIPOLA=as.double(Tabla2$Cod_DIVIPOLA)
aux=aux %>% left_join(Tabla2, by = c("MpCodigo" = "Cod_DIVIPOLA"))
aux[is.na(aux)] <- 0

aux$SRM=(sum(aux$Casos_Acum)/sum(aux$Pob))*(aux$Pob/aux$Casos_Acum)
aux[aux==Inf] <- 0
aux[is.na(aux)] <- 0


row.names(aux) <- row.names(Colombia)
poligonos.data <- SpatialPolygonsDataFrame(Colombia,aux)

Tasa_Contagios <- poligonos.data$Casos/poligonos.data$Pob
Tasa_Contagios[is.na(Tasa_Contagios)] <- 0
Tasa_Contagios[Tasa_Contagios==Inf] <- 0

windows()

# mapa incidencia mes
aux2<-aux
aux2[aux2 == 0] <- NA
class <- classIntervals(round(aux2$IA_mes,3),nclr,style="equal")
colcode <- findColours(class,plotclr)
plot (poligonos.data, col=colcode, border="grey", axes=T)
title(main = "Incidencia COVID 19, Agosto 2021 ",cex=3)
legend("bottomright",legend = names(attr(colcode,"table")),fill= attr(colcode,"palette"),cex=0.75)

# mapa riesgos relativos 
windows()
class1 <- classIntervals(round(aux2$SRM,3),nclr,style="equal")
spplot(poligonos.data, "SRM", at = class1$brks,col.regions=pal1)


Tabla_agosto2021=poligonos.data@data
Tabla_agosto2021[is.na(Tabla_agosto2021)] <- 0



# SEPTIEMBRE 2021

Tabla2=as.data.frame(data %>% filter(Fecha == as.Date("2021-09-01")) 
                     %>% arrange(desc(Cod_DIVIPOLA)) %>% select(Cod_DIVIPOLA,Pob,IA_mes,IA_Acum, Casos_Acum, Casos))
aux= Colombia@data
aux=as.data.frame(aux %>% select(  MpCodigo, MpNombre))
aux$MpCodigo= as.double(aux$MpCodigo)
Tabla2$Cod_DIVIPOLA=as.double(Tabla2$Cod_DIVIPOLA)
aux=aux %>% left_join(Tabla2, by = c("MpCodigo" = "Cod_DIVIPOLA"))
aux[is.na(aux)] <- 0

aux$SRM=(sum(aux$Casos_Acum)/sum(aux$Pob))*(aux$Pob/aux$Casos_Acum)
aux[aux==Inf] <- 0
aux[is.na(aux)] <- 0


row.names(aux) <- row.names(Colombia)
poligonos.data <- SpatialPolygonsDataFrame(Colombia,aux)

Tasa_Contagios <- poligonos.data$Casos/poligonos.data$Pob
Tasa_Contagios[is.na(Tasa_Contagios)] <- 0
Tasa_Contagios[Tasa_Contagios==Inf] <- 0

windows()

# mapa incidencia mes
aux2<-aux
aux2[aux2 == 0] <- NA
class <- classIntervals(round(aux2$IA_mes,3),nclr,style="equal")
colcode <- findColours(class,plotclr)
plot (poligonos.data, col=colcode, border="grey", axes=T)
title(main = "Incidencia COVID 19, Septiembre 2021 ",cex=3)
legend("bottomright",legend = names(attr(colcode,"table")),fill= attr(colcode,"palette"),cex=0.75)

# mapa riesgos relativos 
windows()
class1 <- classIntervals(round(aux2$SRM,3),nclr,style="equal")
spplot(poligonos.data, "SRM", at = class1$brks,col.regions=pal1)


Tabla_septiembre2021=poligonos.data@data
Tabla_septiembre2021[is.na(Tabla_septiembre2021)] <- 0



# OCTUBRE 2021

Tabla2=as.data.frame(data %>% filter(Fecha == as.Date("2021-10-01")) 
                     %>% arrange(desc(Cod_DIVIPOLA)) %>% select(Cod_DIVIPOLA,Pob,IA_mes,IA_Acum, Casos_Acum, Casos))
aux= Colombia@data
aux=as.data.frame(aux %>% select(  MpCodigo, MpNombre))
aux$MpCodigo= as.double(aux$MpCodigo)
Tabla2$Cod_DIVIPOLA=as.double(Tabla2$Cod_DIVIPOLA)
aux=aux %>% left_join(Tabla2, by = c("MpCodigo" = "Cod_DIVIPOLA"))
aux[is.na(aux)] <- 0

aux$SRM=(sum(aux$Casos_Acum)/sum(aux$Pob))*(aux$Pob/aux$Casos_Acum)
aux[aux==Inf] <- 0
aux[is.na(aux)] <- 0


row.names(aux) <- row.names(Colombia)
poligonos.data <- SpatialPolygonsDataFrame(Colombia,aux)

Tasa_Contagios <- poligonos.data$Casos/poligonos.data$Pob
Tasa_Contagios[is.na(Tasa_Contagios)] <- 0
Tasa_Contagios[Tasa_Contagios==Inf] <- 0

windows()

# mapa incidencia mes
aux2<-aux
aux2[aux2 == 0] <- NA
class <- classIntervals(round(aux2$IA_mes,3),nclr,style="equal")
colcode <- findColours(class,plotclr)
plot (poligonos.data, col=colcode, border="grey", axes=T)
title(main = "Incidencia COVID 19, Octubre 2021 ",cex=3)
legend("bottomright",legend = names(attr(colcode,"table")),fill= attr(colcode,"palette"),cex=0.75)

# mapa riesgos relativos 
windows()
class1 <- classIntervals(round(aux2$SRM,3),nclr,style="equal")
spplot(poligonos.data, "SRM", at = class1$brks,col.regions=pal1)


Tabla_octubre2021=poligonos.data@data
Tabla_octubre2021[is.na(Tabla_octubre2021)] <- 0



# NOVIEMBRE 2021

Tabla2=as.data.frame(data %>% filter(Fecha == as.Date("2021-11-01")) 
                     %>% arrange(desc(Cod_DIVIPOLA)) %>% select(Cod_DIVIPOLA,Pob,IA_mes,IA_Acum, Casos_Acum, Casos))
aux= Colombia@data
aux=as.data.frame(aux %>% select(  MpCodigo, MpNombre))
aux$MpCodigo= as.double(aux$MpCodigo)
Tabla2$Cod_DIVIPOLA=as.double(Tabla2$Cod_DIVIPOLA)
aux=aux %>% left_join(Tabla2, by = c("MpCodigo" = "Cod_DIVIPOLA"))
aux[is.na(aux)] <- 0


aux[aux==Inf] <- 0
aux[is.na(aux)] <- 0


row.names(aux) <- row.names(Colombia)
poligonos.data <- SpatialPolygonsDataFrame(Colombia,aux)

Tasa_Contagios <- poligonos.data$Casos/poligonos.data$Pob
Tasa_Contagios[is.na(Tasa_Contagios)] <- 0
Tasa_Contagios[Tasa_Contagios==Inf] <- 0

windows()

# mapa incidencia mes
aux2<-aux
aux2[aux2 == 0] <- NA
class <- classIntervals(round(aux2$IA_mes,3),nclr,style="equal")
colcode <- findColours(class,plotclr)
plot (poligonos.data, col=colcode, border="grey", axes=T)
title(main = "Incidencia COVID 19, Noviembre 2021 ",cex=3)
legend("bottomright",legend = names(attr(colcode,"table")),fill= attr(colcode,"palette"),cex=0.75)

# mapa riesgos relativos 
windows()
class1 <- classIntervals(round(aux2$SRM,3),nclr,style="equal")
spplot(poligonos.data, "SRM", at = class1$brks,col.regions=pal1)


Tabla_noviembre2021=poligonos.data@data
Tabla_noviembre2021[is.na(Tabla_noviembre2021)] <- 0



# DICIEMBRE 2021

Tabla2=as.data.frame(data %>% filter(Fecha == as.Date("2021-12-01")) 
                     %>% arrange(desc(Cod_DIVIPOLA)) %>% select(Cod_DIVIPOLA,Pob,IA_mes,IA_Acum, Casos_Acum, Casos))
aux= Colombia@data
aux=as.data.frame(aux %>% select(  MpCodigo, MpNombre))
aux$MpCodigo= as.double(aux$MpCodigo)
Tabla2$Cod_DIVIPOLA=as.double(Tabla2$Cod_DIVIPOLA)
aux=aux %>% left_join(Tabla2, by = c("MpCodigo" = "Cod_DIVIPOLA"))
aux[is.na(aux)] <- 0

aux$SRM=(sum(aux$Casos_Acum)/sum(aux$Pob))*(aux$Pob/aux$Casos_Acum)
aux[aux==Inf] <- 0
aux[is.na(aux)] <- 0


row.names(aux) <- row.names(Colombia)
poligonos.data <- SpatialPolygonsDataFrame(Colombia,aux)

Tasa_Contagios <- poligonos.data$Casos/poligonos.data$Pob
Tasa_Contagios[is.na(Tasa_Contagios)] <- 0
Tasa_Contagios[Tasa_Contagios==Inf] <- 0

windows()

# mapa incidencia mes
aux2<-aux
aux2[aux2 == 0] <- NA
class <- classIntervals(round(aux2$IA_mes,3),nclr,style="equal")
colcode <- findColours(class,plotclr)
plot (poligonos.data, col=colcode, border="grey", axes=T)
title(main = "Incidencia COVID 19, Diciembre 2021 ",cex=3)
legend("bottomright",legend = names(attr(colcode,"table")),fill= attr(colcode,"palette"),cex=0.75)

# mapa riesgos relativos 
windows()
class1 <- classIntervals(round(aux2$SRM,3),nclr,style="equal")
spplot(poligonos.data, "SRM", at = class1$brks,col.regions=pal1)


Tabla_diciembre2021=poligonos.data@data
Tabla_diciembre2021[is.na(Tabla_diciembre2021)] <- 0



# Using weight to simulate spatial autocorrelation
#InvIrW Function, spatial autorrelacion
set.seed(987654)
n <- length(Colombia.nb)
uncorr_x <- rnorm(n)
rho <- 0.5
autocorr_x <- invIrW(Co0_lw_W, rho) %*% uncorr_x
windows()
plot(autocorr_x)

# Moran Test
moran_u <- moran.test(uncorr_x, listw = Co0_lw_W,zero.policy=TRUE)
moran_a <- moran.test(autocorr_x, listw = Co0_lw_W,zero.policy=TRUE)
moran_a1 <- moran.test(autocorr_x, listw = nb2listw(Co9_nb,style = "W"),zero.policy=TRUE)

et1 <- coords1[, 1] - min(coords1[, 1])
trend_x1 <- uncorr_x + 0.00025 * et1
moran_t1 <- moran.test(trend_x1, listw = Co0_lw_W,zero.policy=TRUE)
# Interpretacion 
moran_t11 <- lm.morantest(lm(trend_x1 ~ et1), listw = Co0_lw_W,zero.policy=TRUE)



Tabla_marzo2020[is.na(Tabla_marzo2020)] <- 0
Tabla_abril2020 [is.na(Tabla_abril2020)]<- 0
Tabla_mayo2020[is.na(Tabla_mayo2020)]<- 0
Tabla_junio2020 [is.na(Tabla_junio2020)]<- 0
Tabla_julio2020[is.na(Tabla_julio2020)] <- 0
Tabla_agosto2020[is.na(Tabla_agosto2020)] <- 0
Tabla_septiembre2020[is.na(Tabla_septiembre2020)] <- 0
Tabla_octubre2020[is.na(Tabla_octubre2020)] <- 0
Tabla_noviembre2020[is.na(Tabla_noviembre2020)] <- 0
Tabla_diciembre2020[is.na(Tabla_diciembre2020)] <- 0
Tabla_enero2021[is.na(Tabla_enero2021)] <- 0
Tabla_febrero2021[is.na(Tabla_febrero2021)] <- 0
Tabla_marzo2021[is.na(Tabla_marzo2021)] <- 0
Tabla_abril2021 [is.na(Tabla_abril2021)]<- 0
Tabla_mayo2021[is.na(Tabla_mayo2021)]<- 0
Tabla_junio2021 [is.na(Tabla_junio2021)]<- 0
Tabla_julio2021[is.na(Tabla_julio2021)] <- 0
Tabla_agosto2021[is.na(Tabla_agosto2021)] <- 0
Tabla_septiembre2021[is.na(Tabla_septiembre2021)] <- 0
Tabla_octubre2021[is.na(Tabla_octubre2021)] <- 0
Tabla_noviembre2021[is.na(Tabla_noviembre2021)] <- 0
Tabla_diciembre2021[is.na(Tabla_diciembre2021)] <- 0

m_test_marzo2020<-moran.test(Tabla_marzo2020$IA_mes, listw = Co0_lw_W,zero.policy=TRUE)
m_test_abril2020<-moran.test(Tabla_abril2020$IA_mes, listw = Co0_lw_W,zero.policy=TRUE)
m_test_mayo2020<-moran.test(Tabla_mayo2020$IA_mes, listw = Co0_lw_W,zero.policy=TRUE)
m_test_junio2020<-moran.test(Tabla_junio2020$IA_mes, listw = Co0_lw_W,zero.policy=TRUE)
m_test_julio2020<-moran.test(Tabla_julio2020$IA_mes, listw =nb2listw(Colombia.nb,zero.policy=TRUE),zero.policy=TRUE)
m_test_agosto2020<-moran.test(Tabla_agosto2020$IA_mes, listw =nb2listw(Colombia.nb,zero.policy=TRUE),zero.policy=TRUE)
m_test_septiembre2020<-moran.test(Tabla_septiembre2020$IA_mes, listw =nb2listw(Colombia.nb,zero.policy=TRUE),zero.policy=TRUE)
m_test_octubre2020<-moran.test(Tabla_octubre2020$IA_mes, listw =nb2listw(Colombia.nb,zero.policy=TRUE),zero.policy=TRUE)
m_test_noviembre2020<-moran.test(Tabla_noviembre2020$IA_mes, listw =nb2listw(Colombia.nb,zero.policy=TRUE),zero.policy=TRUE)
m_test_diciembre2020<-moran.test(Tabla_diciembre2020$IA_mes, listw =nb2listw(Colombia.nb,zero.policy=TRUE),zero.policy=TRUE)
m_test_enero2021<-moran.test(Tabla_enero2021$IA_mes, listw =nb2listw(Colombia.nb,zero.policy=TRUE),zero.policy=TRUE)
m_test_febrero2021<-moran.test(Tabla_febrero2021$IA_mes, listw = Co0_lw_W,zero.policy=TRUE)
m_test_marzo2021<-moran.test(Tabla_marzo2021$IA_mes, listw = Co0_lw_W,zero.policy=TRUE)
m_test_abril2021<-moran.test(Tabla_abril2021$IA_mes, listw = Co0_lw_W,zero.policy=TRUE)
m_test_mayo2021<-moran.test(Tabla_mayo2021$IA_mes, listw = Co0_lw_W,zero.policy=TRUE)
m_test_junio2021<-moran.test(Tabla_junio2021$IA_mes, listw = Co0_lw_W,zero.policy=TRUE)
m_test_julio2021<-moran.test(Tabla_julio2021$IA_mes, listw =nb2listw(Colombia.nb,zero.policy=TRUE),zero.policy=TRUE)
m_test_agosto2021<-moran.test(Tabla_agosto2021$IA_mes, listw =nb2listw(Colombia.nb,zero.policy=TRUE),zero.policy=TRUE)
m_test_septiembre2021<-moran.test(Tabla_septiembre2021$IA_mes, listw =nb2listw(Colombia.nb,zero.policy=TRUE),zero.policy=TRUE)
m_test_octubre2021<-moran.test(Tabla_octubre2021$IA_mes, listw =nb2listw(Colombia.nb,zero.policy=TRUE),zero.policy=TRUE)
m_test_noviembre2021<-moran.test(Tabla_noviembre2021$IA_mes, listw =nb2listw(Colombia.nb,zero.policy=TRUE),zero.policy=TRUE)
m_test_diciembre2021<-moran.test(Tabla_diciembre2021$IA_mes, listw =nb2listw(Colombia.nb,zero.policy=TRUE),zero.policy=TRUE)

# Choose an style B,C,W,U, S # B está estandarizado globalmente (sumas de todos los enlaces a n)
lw_B <- nb2listw(Colombia.nb, style = "B",zero.policy=FALSE)
print(lw_B,zero.policy=FALSE)

moran.test(Tabla_marzo2020$IA_mes, listw = lw_B,zero.policy=FALSE)
moran.test(Tabla_abril2020$IA_mes, listw = lw_B,zero.policy=FALSE)
moran.test(Tabla_mayo2020$IA_mes, listw = lw_B,zero.policy=FALSE)
moran.test(Tabla_junio2020$IA_mes, listw = lw_B,zero.policy=FALSE)
moran.test(Tabla_julio2020$IA_mes, listw = lw_B,zero.policy=FALSE)
moran.test(Tabla_agosto2020$IA_mes, listw = lw_B,zero.policy=FALSE)
moran.test(Tabla_septiembre2020$IA_mes, listw = lw_B,zero.policy=FALSE)
moran.test(Tabla_octubre2020$IA_mes, listw = lw_B,zero.policy=FALSE)
moran.test(Tabla_noviembre2020$IA_mes, listw = lw_B,zero.policy=FALSE)
moran.test(Tabla_diciembre2020$IA_mes, listw = lw_B,zero.policy=FALSE)
moran.test(Tabla_enero2021$IA_mes, listw = lw_B,zero.policy=FALSE)
moran.test(Tabla_febrero2021$IA_mes, listw = lw_B,zero.policy=FALSE)
moran.test(Tabla_marzo2021$IA_mes, listw = lw_B,zero.policy=FALSE)
moran.test(Tabla_abril2021$IA_mes, listw = lw_B,zero.policy=FALSE)
moran.test(Tabla_mayo2021$IA_mes, listw = lw_B,zero.policy=FALSE)
moran.test(Tabla_junio2021$IA_mes, listw = lw_B,zero.policy=FALSE)
moran.test(Tabla_julio2021$IA_mes, listw = lw_B,zero.policy=FALSE)
moran.test(Tabla_agosto2021$IA_mes, listw = lw_B,zero.policy=FALSE)
moran.test(Tabla_septiembre2021$IA_mes, listw = lw_B,zero.policy=FALSE)
moran.test(Tabla_octubre2021$IA_mes, listw = lw_B,zero.policy=FALSE)
moran.test(Tabla_noviembre2021$IA_mes, listw = lw_B,zero.policy=FALSE)
moran.test(Tabla_diciembre2021$IA_mes, listw = lw_B,zero.policy=TRUE)



# Local Test

windows()
?moran.plot

moran.plot(Tabla_marzo2020$IA_mes, listw = lw_B,zero.policy=FALSE )
moran.plot(Tabla_abril2020$IA_mes, listw = lw_B,zero.policy=FALSE )
moran.plot(Tabla_mayo2020$IA_mes, listw = lw_B,zero.policy=FALSE )
moran.plot(Tabla_junio2020$IA_mes, listw = lw_B,zero.policy=FALSE )
moran.plot(Tabla_julio2020$IA_mes, listw = lw_B,zero.policy=FALSE )
moran.plot(Tabla_agosto2020$IA_mes, listw = lw_B,zero.policy=FALSE )
moran.plot(Tabla_septiembre2020$IA_mes, listw = lw_B,zero.policy=FALSE )
moran.plot(Tabla_octubre2020$IA_mes, listw = lw_B,zero.policy=FALSE )
moran.plot(Tabla_noviembre2020$IA_mes, listw = lw_B,zero.policy=FALSE )
moran.plot(Tabla_diciembre2020$IA_mes, listw = lw_B,zero.policy=FALSE )
moran.plot(Tabla_enero2021$IA_mes, listw = lw_B,zero.policy=FALSE )
moran.plot(Tabla_febrero2021$IA_mes, listw = lw_B,zero.policy=FALSE )
moran.plot(Tabla_marzo2021$IA_mes, listw = lw_B,zero.policy=FALSE )
moran.plot(Tabla_abril2021$IA_mes, listw = lw_B,zero.policy=FALSE )
moran.plot(Tabla_mayo2021$IA_mes, listw = lw_B,zero.policy=FALSE )
moran.plot(Tabla_junio2021$IA_mes, listw = lw_B,zero.policy=FALSE )
moran.plot(Tabla_julio2021$IA_mes, listw = lw_B,zero.policy=FALSE )
moran.plot(Tabla_agosto2021$IA_mes, listw = lw_B,zero.policy=FALSE )
moran.plot(Tabla_septiembre2021$IA_mes, listw = lw_B,zero.policy=FALSE )
moran.plot(Tabla_octubre2021$IA_mes, listw = lw_B,zero.policy=FALSE )
moran.plot(Tabla_noviembre2021$IA_mes, listw = lw_B,zero.policy=FALSE )
moran.plot(Tabla_diciembre2021$IA_mes, listw = lw_B,zero.policy=FALSE )




lm1 <- localmoran(Tabla_marzo2020$IA_mes, listw = lw_B, zero.policy=FALSE)
lm2 <- as.data.frame(localmoran.sad(lm(Tabla_marzo2020$IA_mes ~ 1), nb = Colombia.nb, style = "C", zero.policy=FALSE))
lm3 <- as.data.frame(localmoran.exact(lm(Tabla_marzo2020$IA_mes ~ 1),nb = Colombia.nb, style = "C", zero.policy=TRUE))




# mayor incidencia  objetivo 1 

#Incidemcia  a nivel de serie de tiempo en ciudades
# serie de tiempo porp principales ciudades
# correlaciones# temporal, por ciudades

# Analisis de correlaci?n cruzada


marzo_diez <- data %>%  filter(ID.year== "1") %>% 
 arrange(desc(IA_mes))%>%
  slice(1:10)


data10 <- data %>%
  group_by(year) %>%
  top_n(10, IA_mes)


Casos_Rionegro<- data %>%  filter(Cod_DIVIPOLA== "5615")
Casos_Barranquilla<- data %>%  filter(Cod_DIVIPOLA== "8001")
Casos_Barrancabermeja<- data %>%  filter(Cod_DIVIPOLA== "68081")
Casos_Santo_Tomas<- data %>%  filter(Cod_DIVIPOLA== "8685")
Casos_Neiva<- data %>%  filter(Cod_DIVIPOLA== "41001")
Casos_Bucaramanga<- data %>%  filter(Cod_DIVIPOLA== "68001")
Casos_Puerto_Colombia<- data %>%  filter(Cod_DIVIPOLA== "8573")
Casos_Bogota<- data %>%  filter(Cod_DIVIPOLA== "11001")
Casos_Medellin<- data %>%  filter(Cod_DIVIPOLA== "5001")
Casos_Caldas<- data %>%  filter(Cod_DIVIPOLA== "5129")



Casos_Rionegro_ts<- ts(Casos_Rionegro)
Casos_Barranquilla_ts<- ts(Casos_Barranquilla)
Casos_Barrancabermeja_ts<-ts(Casos_Barrancabermeja) 
Casos_Santo_Tomas_ts<- ts(Casos_Santo_Tomas) 
Casos_Neiva_ts<- ts(Casos_Neiva) 
Casos_Bucaramanga_ts<- ts(Casos_Bucaramanga) 
Casos_Puerto_Colombia_ts<- ts(Casos_Puerto_Colombia) 
Casos_Bogota_ts<- ts(Casos_Bogota) 
Casos_Medellin_ts<- ts(Casos_Medellin) 
Casos_Caldas_ts<- ts(Casos_Caldas) 





windows()
tsplot(Casos_Rionegro_ts[,48], ylab="Incidencia COVID_19", lwd=2, col="blue")
lines(Casos_Barranquilla_ts[,48], lwd=2, col="red")
lines(Casos_Santo_Tomas_ts[,48], lwd=2, col="grey")
lines(Casos_Neiva_ts[,48], lwd=2, col="black")
lines(Casos_Bucaramanga_ts[,48], lwd=2, col="chartreuse")
lines(Casos_Puerto_Colombia_ts[,48], lwd=2, col="darkorange1")
lines(Casos_Bogota_ts[,48], lwd=2, col="deeppink2")
lines(Casos_Medellin_ts[,48], lwd=2, col="darkgreen")
lines(Casos_Caldas_ts[,48], lwd=2, col="pink")
legend('bottomright', col=c("blue","red","grey","black","chartreuse","darkorange1","deeppink2", "darkgreen", "pink" ), lwd=2, 
       legend=c("Rionegro", "Barranquilla","Santo_Tomas","Neiva","Bucaramanga","Puerto Colombia","Bogotá D.c." , "Medellin", "Caldas"), bg='white') 



windows()
tsplot(Casos_Rionegro_ts[,47], ylab="Incidencia mes COVID_19", lwd=2, col="blue")
lines(Casos_Barranquilla_ts[,47], lwd=2, col="red")
lines(Casos_Santo_Tomas_ts[,47], lwd=2, col="grey")
lines(Casos_Neiva_ts[,47], lwd=2, col="black")
lines(Casos_Bucaramanga_ts[,47], lwd=2, col="chartreuse")
lines(Casos_Puerto_Colombia_ts[,47], lwd=2, col="darkorange1")
lines(Casos_Bogota_ts[,47], lwd=2, col="deeppink2")
lines(Casos_Medellin_ts[,47], lwd=2, col="darkgreen")
lines(Casos_Caldas_ts[,47], lwd=2, col="pink")
legend('bottomright', col=c("blue","red","grey","black","chartreuse","darkorange1","deeppink2", "darkgreen", "pink" ), lwd=2, 
       legend=c("Rionegro", "Barranquilla","Santo_Tomas","Neiva","Bucaramanga","Puerto Colombia","Medellin" , "Medellin", "Caldas"), bg='white') 



windows()
tsplot(Casos_Rionegro_ts[,44], ylab="Cobertura de vacunacion COVID 19", lwd=2, col="blue")
lines(Casos_Barranquilla_ts[,44], lwd=2, col="red")
lines(Casos_Santo_Tomas_ts[,44], lwd=2, col="grey")
lines(Casos_Neiva_ts[,44], lwd=2, col="black")
lines(Casos_Bucaramanga_ts[,44], lwd=2, col="chartreuse")
lines(Casos_Puerto_Colombia_ts[,44], lwd=2, col="darkorange1")
lines(Casos_Bogota_ts[,44], lwd=2, col="deeppink2")
lines(Casos_Medellin_ts[,44], lwd=2, col="darkgreen")
lines(Casos_Caldas_ts[,44], lwd=2, col="pink")
legend('bottomright', col=c("blue","red","grey","black","chartreuse","darkorange1","deeppink2", "darkgreen", "pink" ), lwd=2, 
       legend=c("Rionegro", "Barranquilla","Santo_Tomas","Neiva","Bucaramanga","Puerto_Colombia","Bogota" , "Medellin", "Caldas"), bg='white') 



windows()
tsplot(Casos_Rionegro_ts[,22], ylab="Tasa mortalidad COVID 19", lwd=2, col="blue")
lines(Casos_Barranquilla_ts[,22], lwd=2, col="red")
lines(Casos_Santo_Tomas_ts[,22], lwd=2, col="grey")
lines(Casos_Neiva_ts[,22], lwd=2, col="black")
lines(Casos_Bucaramanga_ts[,22], lwd=2, col="chartreuse")
lines(Casos_Puerto_Colombia_ts[,22], lwd=2, col="darkorange1")
lines(Casos_Bogota_ts[,22], lwd=2, col="deeppink2")
lines(Casos_Medellin_ts[,22], lwd=2, col="darkgreen")
lines(Casos_Caldas_ts[,22], lwd=2, col="pink")
legend('bottomright', col=c("blue","red","grey","black","chartreuse","darkorange1","deeppink2", "darkgreen", "pink" ), lwd=2, 
       legend=c("Rionegro", "Barranquilla","Santo_Tomas","Neiva","Bucaramanga","Puerto_Colombia","Bogota" , "Medellin", "Caldas"), bg='white') 




ggplot(Casos_Medellin, aes(x = year, y = IA_mes, fill = Nombre_municipio )) +
  geom_line(stat = "identity") +
  ggtitle("Top 10 municipios con más casos de COVID-19 por mes") +
  xlab("Mes") +
  ylab("Número de casos") +
  scale_fill_discrete(name = "Municipio")






Pre_B<- data%>% filter(Cod_DIVIPOLA=="5615" |
                         Cod_DIVIPOLA=="8001"|
                         Cod_DIVIPOLA=="68081" |
                         Cod_DIVIPOLA=="8685" |
                         Cod_DIVIPOLA=="41001" |
                         Cod_DIVIPOLA=="68001" |
                         Cod_DIVIPOLA=="8573" |
                         Cod_DIVIPOLA=="11001" |
                         Cod_DIVIPOLA=="5001" |
                         Cod_DIVIPOLA=="5129")

unique(Pre_B$Nombre_municipio)
colnames(data)
windows()

ggplot(Pre_B, aes(x=year,y = IA_mes, group = Nombre_municipio), ylab="Muertes") +
  geom_line(aes(linetype=Nombre_municipio,color=Nombre_municipio), size=1.2)+
  labs(title="Casos acumulados",x="Fecha", y = "Casos")+
  theme_classic()+
  theme(text = element_text(size=25))



Pre_B_1 <- Pre_B %>%
  group_by(Cod_DIVIPOLA) %>%  filter(year==22)




table1(~ factor (Aeropuerto_Nal)+ Altitud_media + Indice_Desempeño_Fiscal+ 
         DIM_INSTITUCIONAL + IPM_MUN + poblacion_urbana+
         Cobertura_bruta_educación + Tasa_mortalidadGEN + 
         PRE_DM + PRE_ERC + cob_vacunacion_pob2021 +IA_Acum  + Superficie_Km2 +densidad_pob ,data=Pre_B_1, overall="Total",  
       render.continuous=c(.="Mean (SD)", .="Median [Q1, Q3]", .="IQR", .="CV%"))


municipios2=st_read ( "D:/MAESTRIA BIOESTADISITICA/TESIS/BASE DE DATOS/TESIS/fuentes/mpio2/Munpio.shp")
municipios2$Cod_DIVIPOLA<-as.numeric(municipios2$MpCodigo)


municipios2<-left_join(municipios2, Pre_B_1,  by="Cod_DIVIPOLA")
municipios <- municipios %>%  filter(MpCodigo!= "88001")
municipios <- municipios %>%  filter(MpCodigo!= "88564")

plot1<-ggplot(data = municipios2) +
  geom_sf(aes(fill = poblacion_urbana)) + 
  scale_fill_gradient(low = "green",  high = "red", na.value = "NA") 

plot2 <-ggplot(data = municipios2) +
  geom_sf(aes(fill = densidad_pob)) + 
  scale_fill_gradient(low = "green",  high = "red", na.value = "NA")



plot3<- ggplot(data = municipios) +
  geom_sf(aes(fill = Aeropuerto_Nal)) 

plot4<-ggplot(data = municipios) +
  geom_sf(aes(fill = Cobertura_bruta_educación)) + 
  scale_fill_gradient(low = "green",  high = "red", na.value = "NA") 

plot5<- ggplot(data = municipios) +
  geom_sf(aes(fill = IPM_MUN)) + 
  scale_fill_gradient(low = "green",  high = "red", na.value = "NA")

plot6<- ggplot(data = municipios) +
  geom_sf(aes(fill = Indice_Desempeño_Fiscal)) + 
  scale_fill_gradient(low = "green",  high = "red", na.value = "NA") 


plot7<- ggplot(data = municipios) +
  geom_sf(aes(fill = DIM_INSTITUCIONAL)) + 
  scale_fill_gradient(low = "green",  high = "red", na.value = "NA")

plot8<- ggplot(data = municipios) +
  geom_sf(aes(fill = Tasa_mortalidadGEN)) + 
  scale_fill_gradient(low = "green",  high = "red", na.value = "NA")

plot9<- ggplot(data = municipios) +
  geom_sf(aes(fill = cob_vacunacion_pob2021)) + 
  scale_fill_gradient(low = "green",  high = "red", na.value = "NA")

plot10<-  ggplot(data = municipios) +
  geom_sf(aes(fill = IA_Acum)) + 
  scale_fill_gradient(low = "green",  high = "red", na.value = "NA") 

plot11<- ggplot(data = municipios) +
  geom_sf(aes(fill = PRE_DM)) + 
  scale_fill_gradient(low = "green",  high = "red", na.value = "NA") 

plot12<-  ggplot(data = municipios) +
  geom_sf(aes(fill = PRE_ERC)) + 
  scale_fill_gradient(low = "green",  high = "red", na.value = "NA") 


plot13 <-ggplot(data = municipios) +
  geom_sf(aes(fill = Altitud_media)) + 
  scale_fill_gradient(low = "green",  high = "red", na.value = "NA")  


plot14 <-ggplot(data = municipios) +
  geom_sf(aes(fill = Superficie_Km2)) + 
  scale_fill_gradient(low = "green",  high = "red", na.value = "NA")  

windows()

grid.arrange(plot1, plot2, ncol=2) #arranges plots within grid

